[
  {
    "name": "AI-Introduction: Fundamental Issues",
    "outcomes": [
      "Describe the Turing test and the “Chinese Room” thought experiment.",
      "Differentiate between optimal reasoning/behavior and human-like reasoning/behavior.",
      "Differentiate the terms: AI, machine learning, and deep learning.",
      "Enumerate the characteristics of a specific problem."
    ]
  },
  {
    "name": "AI-Search: Search",
    "outcomes": [
      "Design the state space representation for a puzzle (e.g., N-queens or 3-jug problem)",
      "Select and implement an appropriate uninformed search algorithm for a problem (e.g., tic-tac-toe), and characterize its time and space complexities.",
      "Select and implement an appropriate informed search algorithm for a problem after designing a helpful heuristic function (e.g., a robot navigating a 2D gridworld).",
      "Evaluate whether a heuristic for a given problem is admissible/can guarantee an optimal solution.",
      "Design and implement a genetic algorithm solution to a problem.",
      "Design and implement a simulated annealing schedule to avoid local minima in a problem.",
      "Design and implement A*/beam search to solve a problem, and compare it against other search algorithms in terms of the solution cost, number of nodes expanded, etc.",
      "Apply minimax search with alpha-beta pruning to prune search space in a two-player adversarial game (e.g., connect four).",
      "Compare and contrast genetic algorithms with classic search techniques, explaining when it is most appropriate to use a genetic algorithm to learn a model versus other forms of optimization (e.g., gradient descent).",
      "Compare and contrast various heuristic searches vis-a-vis applicability to a given problem.",
      "Model a logic or Sudoku puzzle as a constraint satisfaction problem, solve it with backtrack search, and determine how much arc consistency can reduce the search space."
    ]
  },
  {
    "name": "AI-KRR: Fundamental Knowledge Representation and Reasoning",
    "outcomes": [
      "Given a natural language problem statement, encode it as a symbolic or logical representation.",
      "Explain how we can make decisions under uncertainty, using concepts such as Bayes theorem and utility.",
      "Compute a probabilistic inference in a real-world problem using Bayes’ theorem to determine the probability of a hypothesis given evidence.",
      "Apply Bayes’ rule to determine the probability of a hypothesis given evidence.",
      "Compute the probability of outcomes and test whether outcomes are independent."
    ]
  },
  {
    "name": "AI-ML: Machine Learning",
    "outcomes": [
      "Describe the differences among the three main styles of learning (supervised, reinforcement, and unsupervised) and determine which is appropriate to a particular problem domain.",
      "Differentiate the terms of AI, machine learning, and deep learning.",
      "Frame an application as a classification problem, including the available input features and output to be predicted (e.g., identifying alphabetic characters from pixel grid input).",
      "Apply two or more simple statistical learning algorithms to a classification task and measure the classifiers’ accuracy.",
      "Identify overfitting in the context of a problem and learning curves and describe solutions to overfitting.",
      "Explain how machine learning works as an optimization/search process.",
      "Implement a statistical learning algorithm and the corresponding optimization process to train the classifier and obtain a prediction on new data.",
      "Describe the neural network training process and resulting learned representations.",
      "Explain proper ML evaluation procedures, including the differences between training and testing performance, and what can go wrong with the evaluation process leading to inaccurate reporting of ML performance.",
      "Compare two machine learning algorithms on a dataset, implementing the data preprocessing and evaluation methodology (e.g., metrics and handling of train/test splits) from scratch.",
      "Visualize the training progress of a neural network through learning curves in a well-established toolkit (e.g., TensorBoard) and visualize the learned features of the network.",
      "Compare and contrast several learning techniques (e.g., decision trees, logistic regression, naive Bayes, neural networks, and belief networks), providing examples of when each strategy is superior.",
      "Evaluate the performance of a simple learning system on a real-world dataset.",
      "Characterize the state of the art in learning theory, including its achievements and shortcomings.",
      "Explain the problem of overfitting, along with techniques for detecting and managing the problem.",
      "Explain the triple tradeoff among the size of a hypothesis space, the size of the training set, and performance accuracy.",
      "Given a real-world application of machine learning, describe ethical issues regarding the choices of data, preprocessing steps, algorithm selection, and visualization/presentation of results."
    ]
  },
  {
    "name": "AI-SEP: Applications and Societal Impact",
    "outcomes": [
      "Given a real-world application domain and problem, formulate an AI solution to it, identifying proper data/input, preprocessing, representations, AI techniques, and evaluation metrics/methodology.",
      "Analyze the societal impact of one or more specific real-world AI applications, identifying issues regarding ethics, fairness, bias, trust, and explainability.",
      "Describe some of the failure modes of current deep generative models for language or images, and how this could affect their use in an application."
    ]
  },
  {
    "name": "AI-LRR: Logical Representation and Reasoning",
    "outcomes": [
      "Translate a natural language (e.g., English) sentence into a predicate logic statement.",
      "Convert a logic statement into clausal form.",
      "Apply resolution to a set of logic statements to answer a query.",
      "Compare and contrast the most common models used for structured knowledge representation, highlighting their strengths and weaknesses.",
      "Identify the components of non-monotonic reasoning and its usefulness as a representational mechanism for belief systems.",
      "Compare and contrast the basic techniques for representing uncertainty.",
      "Compare and contrast the basic techniques for qualitative representation.",
      "Apply situation and event calculus to problems of action and change.",
      "Explain the distinction between temporal and spatial reasoning, and how they interrelate.",
      "Explain the difference between rule-based, case-based, and model-based reasoning techniques.",
      "Define the concept of a planning system and how it differs from classical search techniques.",
      "Describe the differences between planning as search, operator-based planning, and propositional planning, providing examples of domains where each is most applicable.",
      "Explain the distinction between monotonic and non-monotonic inference."
    ]
  },
  {
    "name": "AI-Probability: Probabilistic Representation and Reasoning",
    "outcomes": [
      "Compute the probability of a hypothesis given the evidence in a Bayesian network.",
      "Explain how conditional independence assertions allow for greater efficiency of probabilistic systems.",
      "Identify examples of knowledge representations for reasoning under uncertainty.",
      "State the complexity of exact inference.  Identify methods for approximate inference.",
      "Design and implement at least one knowledge representation for reasoning under uncertainty.",
      "Describe the complexities of temporal probabilistic reasoning.",
      "Design and implement an HMM as one example of a temporal probabilistic system.",
      "Describe the relationship between preferences and utility functions.",
      "Explain how utility functions and probabilistic reasoning can be combined to make rational decisions."
    ]
  },
  {
    "name": "AI-Planning: Planning",
    "outcomes": [
      "Construct the state representation, goal, and operators for a given planning problem.",
      "Encode a planning problem in PDDL and use a planner to solve it.",
      "Given a set of operators, initial state, and goal state, draw the partial-order planning graph and include ordering constraints to resolve all conflicts.",
      "Construct the complete planning graph for GraphPlan to solve a given problem."
    ]
  },
  {
    "name": "AI-Agents: Agents and Cognitive Systems",
    "outcomes": [
      "Characterize and contrast the standard agent architectures.",
      "Describe the applications of agent theory to domains such as software agents, personal assistants, and believable agents, and discuss associated ethical implications.",
      "Describe the primary paradigms used by learning agents.",
      "Demonstrate using appropriate examples how multi-agent systems support agent interaction.",
      "Construct an intelligent agent using a well-established cognitive architecture (ACT-R, SOAR) for solving a specific problem."
    ]
  },
  {
    "name": "AI-NLP: Natural Language Processing",
    "outcomes": [
      "Define and contrast deterministic and stochastic grammars, providing examples to show the adequacy of each.",
      "Simulate, apply, or implement classic and stochastic algorithms for parsing natural language.",
      "Identify the challenges of representing meaning.",
      "List the advantages of using standard corpora.  Identify examples of current corpora for a variety of NLP tasks.",
      "Identify techniques for information retrieval, language translation, and text classification.",
      "Implement a TF/IDF transform, use it to extract features from a corpus, and train an off-the-shelf machine learning algorithm using those features to do text classification."
    ]
  },
  {
    "name": "AI-Robotics: Robotics",
    "outcomes": [
      "(Note: Due to the expense of robot hardware, all of these could be done in simulation or with low-cost educational robotic platforms.)",
      "List capabilities and limitations of today's state-of-the-art robot systems, including their sensors and the crucial sensor processing that informs those systems.",
      "Integrate sensors, actuators, and software into a robot designed to undertake a specific task.",
      "Program a robot to accomplish simple tasks using deliberative, reactive, and/or hybrid control architectures.",
      "Implement fundamental motion planning algorithms within a robot configuration space.",
      "Characterize the uncertainties associated with common robot sensors and actuators; articulate strategies for mitigating these uncertainties.",
      "List the differences among robots' representations of their external environment, including their strengths and shortcomings.",
      "Compare and contrast at least three strategies for robot navigation within known and/or unknown environments, including their strengths and shortcomings.",
      "Describe at least one approach for coordinating the actions and sensing of several robots to accomplish a single task.",
      "Compare and contrast a multi-robot coordination and a human-robot collaboration approach and attribute their differences to differences between the problem settings.",
      "Analyze the societal, economic, and ethical issues of a real-world robotics application."
    ]
  },
  {
    "name": "AI-Vision: Perception and Computer Vision",
    "outcomes": [
      "Summarize the importance of image and object recognition in AI and indicate several significant applications of this technology.",
      "List at least three image-segmentation approaches, such as thresholding, edge-based and regionbased algorithms, along with their defining characteristics, strengths, and weaknesses.",
      "Implement 2d object recognition based on contour-based and/or region-based shape representations.",
      "Distinguish the goals of sound-recognition, speech-recognition, and speaker-recognition and identify how the raw audio signal will be handled differently in each of these cases.",
      "Provide at least two examples of a transformation of a data source from one sensory domain to another, e.g., tactile data interpreted as single-band 2d images.",
      "Implement a feature-extraction algorithm on real data, e.g., an edge or corner detector for images or vectors of Fourier coefficients describing a short slice of audio signal.",
      "Implement an algorithm combining features into higher-level percepts, e.g., a contour or polygon from visual primitives or phoneme hypotheses from an audio signal.",
      "Implement a classification algorithm that segments input percepts into output categories and quantitatively evaluates the resulting classification.",
      "Evaluate the performance of the underlying feature-extraction, relative to at least one alternative possible approach (whether implemented or not) in its contribution to the classification task (8), above.",
      "Describe at least three classification approaches, their prerequisites for applicability, their strengths, and their shortcomings.",
      "Implement and evaluate a deep learning solution to problems in computer vision, such as object or scene recognition."
    ]
  },
  {
    "name": "AL-Foundational: Foundational Data Structures and Algorithms",
    "outcomes": [
      "For each ADT/Data-Structure in this unit",
      "Explain its definition, properties, representation(s), and associated ADT operations.",
      "Explain step-by-step how the ADT operations associated with the data structure transform it.",
      "For each algorithm in this unit explain step-by-step how the algorithm operates.",
      "For each algorithmic approach (e.g., sorting) in this unit apply a prototypical example of the approach (e.g., merge sort).",
      "Given requirements for a problem, develop multiple solutions using various data structures and algorithms. Subsequently, evaluate the suitability, strengths, and weaknesses selecting an approach that best satisfies the requirements.",
      "Explain how collision avoidance and collision resolution is handled in hash tables.",
      "Explain factors beyond computational efficiency that influence the choice of algorithms, such as programming time, maintainability, and the use of application-specific patterns in the input data.",
      "Explain the heap property and the use of heaps as an implementation of a priority queue.",
      "Explain a prototypical example of the algorithm, and",
      "Explain step-by-step how the algorithm operates.",
      "An appreciation of quantum computation and its application to certain problems."
    ]
  },
  {
    "name": "AL-Strategies: Algorithmic Strategies",
    "outcomes": [
      "For each of the paradigms in this unit,",
      "Explain its definitional characteristics,",
      "Explain an example that demonstrates the paradigm including how this example satisfies the paradigm’s characteristics.",
      "For each of the algorithms in the AL-Foundational unit, explain the paradigm used by the algorithm and how it exemplifies this paradigm.",
      "Given an algorithm, explain the paradigm used by the algorithm and how it exemplifies this paradigm.",
      "Give a real-world problem, evaluate appropriate algorithmic paradigms and algorithms from these paradigms that address the problem including evaluating the tradeoffs among the paradigms and algorithms selected.",
      "Give examples of iterative and recursive algorithms that solve the same problem, explain the benefits and disadvantages of each approach.",
      "Evaluate whether a greedy approach leads to an optimal solution.",
      "Explain various approaches for addressing computational problems whose algorithmic solutions are exponential."
    ]
  },
  {
    "name": "AL-Complexity: Complexity",
    "outcomes": [
      "Prepare a presentation that explains to first year students the basic concepts of algorithmic complexity including best, average, and worst-case algorithm behavior, Big- O, Omega, and Theta notations, complexity classes, time and space tradeoffs, empirical measurement, and impact on practical problems.",
      "Using examples, explain each of the foundational complexity classes in this unit.",
      "For each foundational complexity class in this unit, explain an algorithm that demonstrates the associated runtime complexity.",
      "For each algorithm in the AL-Foundational unit, explain its runtime complexity class and why it belongs to this class.",
      "Informally evaluate the foundational complexity class of simple algorithms.",
      "Given a problem to program for which there may be several algorithmic approaches, evaluate them and determine which are feasible, and select one that is optimal in implementation and run-time behavior.",
      "Develop empirical studies to determine and validate hypotheses about the runtime complexity of various algorithms by running algorithms on input of various sizes and comparing actual performance to the theoretical analysis.",
      "Explain examples that illustrate time-space tradeoffs of algorithms.",
      "Explain how tree balance affects the efficiency of binary search tree operations.",
      "Explain to a non-technical audience the significance of tractable versus intractable algorithms using an intuitive explanation of Big-O complexity.",
      "Explain the significance of NP-Completeness.",
      "Explain how NP-Hard is a lower bound and NP is an upper bound for NP-Completeness.",
      "Explain examples of NP-complete problems.",
      "Use recurrence relations to evaluate the time complexity of recursively defined algorithms.",
      "Apply elementary recurrence relations using a form of the Master Theorem.",
      "Apply Big-O notation to give upper case bounds on time/space complexity of algorithms.",
      "Explain the Cook-Levin Theorem and the NP-Completeness of SAT.",
      "Explain the classes P and NP.",
      "Prove that a problem is NP-Complete by reducing a classic known NP-C problem to it (e.g., 3SAT and Clique).",
      "Explain the P-space class and its relation to the EXP class."
    ]
  },
  {
    "name": "AL-Models: Computational Models and Formal Languages",
    "outcomes": [
      "For each formal automaton in this unit:",
      "Explain its definition comparing its characteristics with this unit’s other automata,",
      "Using an example, explain step-by-step how the automaton operates on input including whether it accepts the associated input,",
      "Explain an example of inputs that can and cannot be accepted by the automaton.",
      "Given a problem, develop an appropriate automaton that addresses the problem.",
      "Develop a regular expression for a given regular language expressed in natural language.",
      "Explain the difference between regular expressions (Type-3 acceptors) and the regular expressions (Type-2 acceptors) used in programming languages.",
      "For each formal model in this unit:",
      "Explain its definition comparing its characteristics with the others in this unit,",
      "Explain example inputs that are and cannot be accepted by the language/grammar.",
      "Explain a universal Turing Machine and its operation.",
      "Present to an audience of co-workers and managers the impossibility of providing them a program that checks all other programs, including some seemingly simple ones, for infinite loops including an explanation of the Halting problem, why it has no algorithmic solution, and its significance for real-world algorithmic computation.",
      "Explain examples of classic uncomputable problems.",
      "Explain the Church-Turing Thesis and its significance for algorithmic computation.",
      "Explain how (loop) invariants can be used to prove the correctness of an algorithm.",
      "Illustrative Learning Outcomes:",
      "For each formal automaton in this unit explain (compare/contrast) its deterministic and nondeterministic capabilities.",
      "Apply pumping lemmas, or alternative means, to prove the limitations of Finite State and Pushdown automata.",
      "Apply arithmetization and diagonalization to prove the Halting Problem for Turing Machines is Undecidability.",
      "Given a known undecidable language, apply a mapping reduction or computational history to prove that another language is undecidable.",
      "Convert among equivalently powerful notations for a language, including among DFAs, NFAs, and regular expressions, and between PDAs and CFGs.",
      "Explain Rice’s theorem and its significance.",
      "Explain an example proof of a problem that is uncomputable by reducing a classic known uncomputable problem to it.",
      "Explain the Primitive and General Recursive functions (zero, successor, selection, primitive recursion, composition, and Mu), their significance, and Turing Machine implementations.",
      "Explain how computation is performed in Lambda Calculus (e.g., Alpha conversion and Beta reduction)",
      "For a quantum system give examples that explain the following postulates.",
      "State Space – system state represented as a unit vector in Hilbert space,",
      "State Evolution – the use of unitary operators to evolve system state,",
      "State Composition – the use of tensor product to compose systems states,",
      "State Measurement – the probabilistic output of measuring a system state.",
      "Explain the operation of a quantum XNOT or CNOT gate on a quantum bit represented as a matrix and column vector, respectively."
    ]
  },
  {
    "name": "AL-SEP: Society, Ethics, and the Profession",
    "outcomes": [
      "Develop algorithmic solutions to real-world societal problems, such as routing an ambulance to a hospital.",
      "Explain the impact that an algorithm may have on the environment and society when used to solve a real-world problem while considering its sustainability and that it can affect different societal groups in different ways.",
      "Prepare a presentation that justifies the selection of appropriate data structures and/or algorithms to solve a given real-world problem.",
      "Explain an example that articulates how differential privacy protects knowledge of an individual’s data.",
      "Explain the environmental impacts of design choices that relate to algorithm design.",
      "Explain the tradeoffs involved in proof-of-work and proof-of-stake algorithms."
    ]
  },
  {
    "name": "AR-Logic: Digital Logic and Digital Systems",
    "outcomes": [
      "Discuss the progression of computer technology components from vacuum tubes to VLSI, from mainframe computer architectures to the organization of warehouse-scale computers.",
      "Describe parallelism and data dependencies between and within components in a modern heterogeneous computer architecture.",
      "Explain the relationship between parallelism and power consumption.",
      "Construct the design of basic building blocks for a computer: arithmetic-logic unit (gate-level), registers (gate-level), central processing unit (register transfer-level), and memory (register transferlevel).",
      "Evaluate simple building blocks (e.g., arithmetic-logic unit, registers, movement between registers) of a simple computer design.",
      "Analyze the timing behavior of a pipelined processor, identifying data dependency issues."
    ]
  },
  {
    "name": "AR-Representation: Machine-Level Data Representation",
    "outcomes": [
      "Discuss why everything in computers are data, including instructions.",
      "Explain how fixed-length number representations can affect accuracy and precision.",
      "Describe how negative integers are stored in sign-magnitude and two’s-complement representations.",
      "Discuss how different formats can represent numerical data.",
      "Explain the bit-level representation of non-numeric data, such as characters, strings, records, and arrays.",
      "Translate numerical data from one format to another.",
      "Describe how a single adder (without overflow detection) can handle both signed (two’s complement) and unsigned (binary) input without “knowing” which format a given input is using."
    ]
  },
  {
    "name": "AR-Assembly: Assembly Level Machine Organization",
    "outcomes": [
      "Discuss how the classical von Neumann functional units are implemented in embedded systems, particularly on-chip and off-chip memory.",
      "Describe how instructions are executed in a classical von Neumann machine, with extensions for threads, multiprocessor synchronization, and SIMD execution.",
      "Assess an example diagram with instruction-level parallelism and hazards to describe how they are managed in typical processor pipelines.",
      "Discuss how instructions are represented at the machine level and in the context of a symbolic assembler.",
      "Map an example of high-level language patterns into assembly/machine language notations.",
      "Contrast different instruction formats considering aspects such as addresses per instruction and variable-length vs fixed-length formats.",
      "Analyze a subroutine diagram to comment on how subroutine calls are handled at the assembly level.",
      "Describe basic concepts of interrupts and I/O operations.",
      "Write a simple assembly language program for string/array processing and manipulation."
    ]
  },
  {
    "name": "AR-Memory: Memory Hierarchy",
    "outcomes": [
      "Using a memory system diagram, identify the main types of memory technology (e.g., SRAM, DRAM) and their relative cost and performance.",
      "Measure the effect of memory latency on running time.",
      "Enumerate the functions of a system with virtual memory management.",
      "Compute average memory access time under various cache and memory configurations and mixes of instruction and data references."
    ]
  },
  {
    "name": "AR-IO: Interfacing and Communication",
    "outcomes": [
      "Analyze an interrupt control diagram to comment on how interrupts are used to implement I/O control and data transfers.",
      "Enumerate various types of buses in a computer system.",
      "List the advantages of magnetic disks and contrast them with those of solid-state disks."
    ]
  },
  {
    "name": "AR-Organization: Functional Organization",
    "outcomes": [
      "Compare alternative implementation of datapaths in modern computer architectures.",
      "Produce a set of control signals for adding two integers using hardwired and microprogrammed implementations.",
      "Discuss instruction-level parallelism using pipelining and significant hazards that may occur.",
      "Design a complete processor, including datapath and control.",
      "Compute the average cycles per instruction for a given processor and memory system implementation."
    ]
  },
  {
    "name": "AR-Performance-Energy: Performance and Energy Efficiency",
    "outcomes": [
      "Discuss performance and energy efficiency evaluation metrics.",
      "Analyze a speculative execution diagram and write about the decisions that can be made.",
      "Create a GPU performance-watt benchmarking diagram.",
      "Write a multithreaded program that adds (in parallel) elements of two integer vectors.",
      "Recommend a set of design choices for alternative computer architectures.",
      "Enumerate key concepts associated with dynamic voltage and frequency scaling.",
      "Measure energy savings improvement for an 8-bit integer quantization compared to a 32-bit quantization."
    ]
  },
  {
    "name": "AR-Heterogeneity: Heterogeneous Architectures",
    "outcomes": [
      "Analyze a system diagram with alternative parallel architectures, e.g., SIMD and MIMD, and identify the key differences.",
      "Discuss what memory-management issues are found in multiprocessors that are not present in uniprocessors and how these issues might be resolved.",
      "Indicate the differences between memory backplane, processor memory interconnect, and remote memory via networks, their implications for access latency, and their impact on program performance.",
      "Discuss how you would determine when to use a domain-specific accelerator instead of a generalpurpose CPU.",
      "Enumerate key differences in architectural design principles between a vector and scalar-based processing unit.",
      "List the advantages and disadvantages of a PIM architecture."
    ]
  },
  {
    "name": "AR-Security: Secure Processor Architectures",
    "outcomes": [
      "Discuss principles of secure hardware, exploring a framework for risk analysis and asset protection.",
      "Summarize how Physically Unclonable Functions (PUF) can be a unique device identifier in security applications.",
      "Distinguish a random number generator with dedicated hardware support from generators without hardware dedicated to generating entropy.",
      "List the advantages and disadvantages of memory protection at the ISA level.",
      "Describe key design issues of a trusted execution environment (TEE) to support virtual machines."
    ]
  },
  {
    "name": "AR-Quantum: Quantum Architectures",
    "outcomes": [
      "Discuss how a quantum object produced as a particle propagates like a wave and is detected as a particle with a probability distribution corresponding to the wave.",
      "Discuss the quantum-level nature that is inherently probabilistic.",
      "Express your view on entanglement that can be used to create non-classical correlations, but there is no way to use quantum entanglement to send messages faster than the speed of light.",
      "Describe quantum parallelism and the role of constructive vs destructive interference in quantum algorithms given the probabilistic nature of measurement(s).",
      "Analyze a code snippet providing the role of quantum Fourier transform (QFT) in Shor’s algorithm.",
      "Write a program to implement Shor’s algorithm in a simulator, highlighting the classical components and aspects of Shor’s algorithm.",
      "Enumerate the specifics of each qubit modality (e.g., trapped ion, superconducting, silicon spin, photonic, quantum dot, neutral atom, topological, color center, electron-on-helium).",
      "Contrast AQC with the gate model of quantum computation and the problems each is better suited to solve."
    ]
  },
  {
    "name": "AR-SEP: Sustainability Issues",
    "outcomes": [
      "1. Assess the environmental impacts of a given project’s deployment (e.g., the energy consumption of CPUs and GPUs, contribution to e-waste, and effect of hardware virtualization in data centers)."
    ]
  },
  {
    "name": "DM-Data: The Role of Data and the Data Life Cycle",
    "outcomes": [
      "1. Identify the five stages of the Data Life Cycle."
    ]
  },
  {
    "name": "DM-Core: Core Database System Concepts",
    "outcomes": [
      "Identify at least four advantages that using a database system provides.",
      "Enumerate the components of a (relational) database system.",
      "Follow a query as it is processed by the components of a (relational) database system.",
      "Defend the value of data independence.",
      "Compose a simple select-project-join query in SQL.",
      "Enumerate the four properties of a correct transaction manager.",
      "Describe the advantages for eliminating duplicate repeated data.",
      "Outline how MapReduce uses parallelism to process data efficiently.",
      "Evaluate the differences between structured and semi/unstructured databases."
    ]
  },
  {
    "name": "DM-Modeling: Data Modeling",
    "outcomes": [
      "Describe the components of the relational data model.",
      "Model 1:1, 1:n, and n:m relationships using the relational data model.",
      "Describe the components of the E-R (or some other non-relational) data model.",
      "Model a given environment using a conceptual data model.",
      "Model a given environment using the document-based or key-value store-based data model."
    ]
  },
  {
    "name": "DM-Relational: Relational Databases",
    "outcomes": [
      "Describe the defining characteristics behind the relational data model.",
      "Comment on the difference between a foreign key and a superkey.",
      "Enumerate the different types of integrity constraints.",
      "Compose a relational schema from a conceptual schema which contains 1:1, 1:n, and n:m relationships.",
      "Map appropriate file structure to relations and indices.",
      "Describe how functional dependency theory generalizes the notion of key. 7. Defend a given decomposition as lossless and or dependency preserving.",
      "Detect which normal form a given decomposition yields.",
      "Comment on reasons for denormalizing a relation."
    ]
  },
  {
    "name": "DM-Querying: Query Construction",
    "outcomes": [
      "Compose SQL queries that incorporate select, project, join, union, intersection, set difference, and set division.",
      "Determine when a nested SQL query is correlated or not.",
      "Iterate over data retrieved programmatically from a database via an SQL query.",
      "Define, in SQL, a relation schema, including all integrity constraints and delete/update triggers.",
      "Compose an SQL query to update a tuple in a relation."
    ]
  },
  {
    "name": "DM-Processing: Query Processing",
    "outcomes": [
      "Describe the purpose and organization of both B+ tree and hash index structures.",
      "Compose an SQL command to create an index (any kind).",
      "Specify the steps for the various query operator algorithms: external sorting, projection with duplicate elimination, sort-merge join, hash-join, block nested-loop join.",
      "Derive the run-time (in I/O requests) for each of the above algorithms.",
      "Transform a query in relational algebra to its equivalent appropriate for a left-deep, pipelined execution.",
      "Compute selectivity estimates for a given selection and/or join operation.",
      "Describe how to modify an index structure to facilitate an index-only operation for a given relation.",
      "For a given scenario decide on which indices to support for the efficient execution of a set of queries.",
      "Describe how DBMSs leverage parallelism to speed up query processing by dividing the work across multiple processors or nodes."
    ]
  },
  {
    "name": "DM-Internals: DBMS Internals",
    "outcomes": [
      "Describe how a DBMS manages its Buffer Pool.",
      "Describe the four properties for a correct transaction manager.",
      "Outline the principle of serializability."
    ]
  },
  {
    "name": "DM-NoSQL: NoSQL Systems",
    "outcomes": [
      "Develop a use case for the use of NoSQL over RDBMS.",
      "Describe the defining characteristics behind Key-Value and Document-based data models."
    ]
  },
  {
    "name": "DM-Security: Data Security and Privacy",
    "outcomes": [
      "Describe the differences in the goals for data security and data privacy.",
      "Identify and mitigate risks associated with different approaches to protecting data.",
      "Describe legal and ethical considerations of end-to-end data security and privacy.",
      "Develop a database auditing system given risk considerations.",
      "Apply several data exploration approaches to understanding unfamiliar datasets."
    ]
  },
  {
    "name": "DM-Analytics: Data Analytics",
    "outcomes": [
      "Describe several data exploration approaches, including visualization, to understanding unfamiliar datasets.",
      "Apply several data exploration approaches to understanding unfamiliar datasets.",
      "Describe basic machine learning/data mining algorithms and when they are appropriate for use.",
      "Apply several machine learning/data mining algorithms.",
      "Describe legal and ethical considerations in acquiring, using, and modifying datasets.",
      "Describe issues of fairness and bias in data collection and usage."
    ]
  },
  {
    "name": "DM-SEP: Society, Ethics, and the Profession",
    "outcomes": [
      "Enumerate three social and three legal issues related to large data collections.",
      "Describe the value of data privacy.",
      "Identify the competing stakeholders with respect to data ownership.",
      "Enumerate three negative unintended consequences from a given (well known) data-centric application (e.g., Facebook, LastPass, Ashley Madison).",
      "Describe the meaning of data provenance and lineage.",
      "Identify how a database might contribute to data security as well as how it may introduce insecurities."
    ]
  },
  {
    "name": "FPL-OOP: Object-Oriented Programming",
    "outcomes": [
      "Enumerate the differences between imperative and object-oriented programming paradigms.",
      "Compose a class through design, implementation, and testing to meet behavioral requirements.",
      "Build a simple class hierarchy utilizing subclassing that allows code to be reused for distinct subclasses.",
      "Predict and validate control flow in a program using dynamic dispatch.",
      "Compare and contrast how computational solutions to a problem differ in procedural, functional, and object-oriented approaches.",
      "Compare and contrast mechanisms to define and protect data elements within procedural, functional, and object-oriented approaches.",
      "Compare and contrast the benefits and costs/impact of using inheritance (subclasses) and composition (specifically, how to base composition on higher order functions).",
      "Explain the relationship between object-oriented inheritance (code-sharing and overriding) and subtyping (the idea of a subtype being usable in a context that expects the supertype).",
      "Use object-oriented encapsulation mechanisms such as interfaces and private members.",
      "Define and use iterators and other operations on aggregates, including operations that take functions as arguments, in multiple programming languages, selecting the most natural idioms for each language. (See also: FPL-Functional)",
      "Use collection classes and iterators effectively to solve a problem."
    ]
  },
  {
    "name": "FPL-Functional: Functional Programming",
    "outcomes": [
      "Develop basic algorithms that avoid assigning to mutable states or considering reference equality.",
      "Develop useful functions that take and return other functions.",
      "Compare and contrast how computational solutions to a problem differ in procedural, functional, and object-oriented approaches.",
      "Compare and contrast mechanisms to define and protect data elements within procedural, functional, and object-oriented approaches.",
      "Explain a simple example of lambda expression being implemented using a virtual machine, such as a SECD machine, showing storage and reclaim of the environment.",
      "Correctly interpret variables and lexical scope in a program using function closures.",
      "Use functional encapsulation mechanisms such as closures and modular interfaces.",
      "Compare and contrast stateful vs stateless execution.",
      "Define and use iterators and other operations on aggregates, including operations that take functions as arguments, in multiple programming languages, selecting the most natural idioms for each language. (See also: FPL-OOP)",
      "Illustrate graph reduction using a λ-expression using a shared subexpression.",
      "Illustrate the execution of a simple nested λ-expression using an abstract machine, such as an ABC machine.",
      "Illustrate narrowing, residuation, and semantic unification using simple illustrative examples.",
      "Illustrate the concurrency constructs using simple programming examples of known concepts such as a buffer being read and written concurrently or sequentially. (See also: FPL-OOP)"
    ]
  },
  {
    "name": "FPL-Logic: Logic Programming",
    "outcomes": [
      "Use a logic language to implement a conventional algorithm.",
      "Use a logic language to implement an algorithm employing implicit search using clauses, relations, and cuts.",
      "Use a simple illustrative example to show correspondence between First Order Predicate Logic (FOPL) and logic programs using Horn clauses.",
      "Use examples to illustrate the unification algorithm and its role of parameter-passing in query reduction.",
      "Use simple logic programs interleaving relations, functions, and recursive programming such as factorial and Fibonacci numbers and simple complex relationships between entities and illustrate execution and parameter-passing using unification and backtracking.",
      "Illustrate computation of simple programs such as Fibonacci and show overhead of recomputation, and then show how to improve execution overhead."
    ]
  },
  {
    "name": "FPL-Scripting: Shell Scripting",
    "outcomes": [
      "Create and execute automated scripts to manage various system tasks.",
      "Solve various text processing problems through scripting."
    ]
  },
  {
    "name": "FPL-Event-Driven: Event-Driven and Reactive Programming",
    "outcomes": [
      "Implement event handlers for use in reactive systems, such as GUIs.",
      "Examine why an event-driven programming style is natural in domains where programs react to external events.",
      "Define and use a reactive framework.",
      "Describe an interactive system in terms of a model, a view, and a controller."
    ]
  },
  {
    "name": "FPL-Parallel: Parallel and Distributed Computing",
    "outcomes": [
      "Explain why programming languages do not guarantee sequential consistency in the presence of data races and what programmers must do as a result.",
      "Implement correct concurrent programs using multiple programming models, such as shared memory, actors, futures, synchronization constructs, and data-parallelism primitives.",
      "Use a message-passing model to analyze a communication protocol.",
      "Use synchronization constructions such as monitor/synchronized methods in a simple program.",
      "Modeling data dependency using simple programming constructs involving variables, read and write.",
      "Modeling control dependency using simple constructs such as selection and iteration.",
      "Explain how REST API's integrate applications and automate processes.",
      "Explain benefits, constraints and challenges related to distributed and parallel computing."
    ]
  },
  {
    "name": "FPL-Types: Type Systems",
    "outcomes": [
      "Describe, for both a primitive and a compound type, the values that have that type.",
      "Describe, for a language with a static type system, the operations that are forbidden statically, such as passing the wrong type of value to a function or method.",
      "Describe examples of program errors detected by a type system.",
      "Identify program properties, for multiple programming languages, that are checked statically and program properties that are checked dynamically.",
      "Describe an example program that does not type-check in a particular language and yet would have no error if run.",
      "Use types and type-error messages to write and debug programs.",
      "Explain how typing rules define the set of operations that are legal for a type.",
      "List the type rules governing the use of a particular compound type.",
      "Explain why undecidability requires type systems to conservatively approximate program behavior.",
      "Define and use program pieces (such as functions, classes, methods) that use generic types, including for collections.",
      "Discuss the differences among generics, subtyping, and overloading.",
      "Explain multiple benefits and limitations of static typing in writing, maintaining, and debugging software.",
      "Define a type system precisely and compositionally.",
      "For various foundational type constructors, identify the values they describe and the invariants they enforce.",
      "Precisely describe the invariants preserved by a sound type system.",
      "Prove type safety for a simple language in terms of preservation and progress theorems.",
      "Implement a unification-based type-inference algorithm for a simple language.",
      "Explain how static overloading and associated resolution algorithms influence the dynamic behavior of programs."
    ]
  },
  {
    "name": "FPL-Systems: Systems Execution and Memory Model",
    "outcomes": [
      "Explain how a core language construct, such as data abstractions and control abstractions, is executed.",
      "Explain how programming language implementations typically organize memory into global data, text, heap, and stack sections and how features such as recursion and memory management map to this memory model.",
      "Explain why memory leaks and dangling pointer problems occur, and what can be done by a programmer to avoid/fix them."
    ]
  },
  {
    "name": "FPL-Translation: Language Translation and Execution",
    "outcomes": [
      "Explain and understand the differences between compiled, JIT, and interpreted language implementations, including the benefits and limitations of each.",
      "Differentiate syntax and parsing from semantics and evaluation.",
      "Use BNF and extended BNF to specify the syntax of simple constructs such as if-then-else, type declaration and iterative constructs for known languages such as C++ or Python.",
      "Illustrate the parse tree using a simple sentence/arithmetic expression.",
      "Illustrate translation of syntax diagrams to BNF/extended BNF for simple constructs such as if-thenelse, type declaration, iterative constructs, etc.",
      "Illustrate ambiguity in parsing using nested if-then-else/arithmetic expression and show resolution using precedence order.",
      "KA-Core:",
      "Discuss the benefits and limitations of garbage collection, including the notion of reachability."
    ]
  },
  {
    "name": "FPL-Abstraction: Program Abstraction and Representation",
    "outcomes": [
      "Illustrate the scope of variables and visibility using simple programs.",
      "Illustrate different types of parameter-passing using simple pseudo programming language.",
      "Explain side-effect using global and nonlocal variables and how to fix such programs.",
      "Explain how programs that process other programs treat the other programs as their input data.",
      "Describe a grammar and an abstract syntax tree for a small language.",
      "Describe the benefits of having program representations other than strings of source code.",
      "Implement a program to process some representation of code for some purpose, such as an interpreter, an expression optimizer, or a documentation generator."
    ]
  },
  {
    "name": "FPL-Syntax: Syntax Analysis",
    "outcomes": [
      "Use formal grammars to specify the syntax of languages.",
      "Illustrate the role of lookahead tables in parsing.",
      "Use declarative tools to generate parsers and scanners.",
      "Recognize key issues in syntax definitions: ambiguity, associativity, precedence."
    ]
  },
  {
    "name": "FPL-Semantics: Compiler Semantic Analysis",
    "outcomes": [
      "Draw the abstract syntax tree for a small language.",
      "Implement context-sensitive, source-level static analyses such as type-checkers or resolving identifiers to identify their binding occurrences.",
      "Describe semantic analyses using an attribute grammar."
    ]
  },
  {
    "name": "FPL-Analysis: Program Analysis and Analyzers",
    "outcomes": [
      "Explain the difference between dataflow graph and control flow graph.",
      "Explain why non-trivial sound program analyses must be approximate.",
      "Argue why an analysis is correct (sound and terminating).",
      "Explain why potential aliasing limits sound program analysis and how alias analysis can help.",
      "Use the results of a program analysis for program optimization and/or partial program correctness."
    ]
  },
  {
    "name": "FPL-Code: Code Generation",
    "outcomes": [
      "Identify all essential steps for automatically converting source code into assembly or other low-level languages.",
      "Explain the low-level code necessary for calling functions/methods in modern languages.",
      "Discuss why separate compilation requires uniform calling conventions.",
      "Discuss why separate compilation limits optimization because of unknown effects of calls.",
      "Discuss opportunities for optimization introduced by naive translation and approaches for achieving.",
      "optimization, such as instruction selection, instruction scheduling, register allocation, and peephole optimization."
    ]
  },
  {
    "name": "FPL-Run-Time: Run-time Behavior and Systems",
    "outcomes": [
      "Discuss benefits and limitations of automatic memory management.",
      "Explain the use of metadata in run-time representations of objects and activation records, such as class pointers, array lengths, return addresses, and frame pointers.",
      "Compare and contrast static allocation vs stack-based allocation vs heap-based allocation of data elements.",
      "Explain why some data elements cannot be automatically deallocated at the end of a procedure/method call (need for garbage collection).",
      "Discuss advantages, disadvantages, and difficulties of just-in-time and dynamic recompilation.",
      "Discuss the use of sandboxing in mobile code.",
      "Identify the services provided by modern language run-time systems."
    ]
  },
  {
    "name": "FPL-Constructs: Advanced Programming Constructs",
    "outcomes": [
      "Use various advanced programming constructs and idioms correctly.",
      "Discuss how various advanced programming constructs aim to improve program structure, software quality, and programmer productivity.",
      "Discuss how various advanced programming constructs interact with the definition and implementation of other language features."
    ]
  },
  {
    "name": "FPL-Pragmatics: Language Pragmatics",
    "outcomes": [
      "Discuss the role of concepts such as orthogonality and well-chosen defaults in language design.",
      "Objectively evaluate and justify language-design decisions.",
      "Implement an example program whose result can differ under different rules for evaluation order, precedence, or associativity.",
      "Illustrate uses of delayed evaluation, such as user-defined control abstractions.",
      "Discuss the need for allowing calls to external calls and system libraries and the consequences for language implementation."
    ]
  },
  {
    "name": "FPL-Formalism: Formal Semantics",
    "outcomes": [
      "Construct formal semantics for a small language.",
      "Write a lambda-calculus program and show its evaluation to a normal form.",
      "Discuss the different approaches of operational, denotational, and axiomatic semantics.",
      "Use induction to prove properties of all programs in a language.",
      "Use induction to prove properties of all programs in a language that is well-typed according to a formally defined type system.",
      "Use parametricity to establish the behavior of code given only its type."
    ]
  },
  {
    "name": "FPL-Methodologies: Formal Development Methodologies",
    "outcomes": [
      "Use formal modeling techniques to develop and validate architectures.",
      "Use proof assisted programming languages to develop fully specified and verified software artifacts.",
      "Use verifier and specification support in programming languages to formally validate system properties.",
      "Integrate symbolic validation tooling into a programming workflow.",
      "Discuss when and how formal methods can be effectively used in the development process."
    ]
  },
  {
    "name": "FPL-Design: Design Principles of Programming Languages",
    "outcomes": [
      "1. Understand what constitutes good language design and apply that knowledge to evaluate a real programming language."
    ]
  },
  {
    "name": "FPL-SEP: Society, Ethics, and the Profession",
    "outcomes": [
      "1. Consciously design programming languages to be inclusive and non-offensive."
    ]
  },
  {
    "name": "GIT-Fundamentals: Fundamental Concepts",
    "outcomes": [
      "Identify common uses of digital presentation to humans (e.g., computer graphics, sound).",
      "Describe how analog signals can be reasonably represented by discrete samples, for example, how images can be represented by pixels.",
      "Compute the memory requirement for storing a color image given its resolution.",
      "Create a graphic depicting how the limits of human perception affect choices about the digital representation of analog signals.",
      "Indicate when and why you should use each of the following common file formats: JPG, PNG, MP3, MP4, and GIF.",
      "Describe color models and their use in graphics display devices.",
      "Compute the memory requirements for a multi-second movie (lasting n seconds) displaying at a specific framerate (f frames per second) at a specified resolution (r pixels per frame)",
      "Compare and contrast digital video to analog video.",
      "Describe the basic process of producing continuous motion from a sequence of discrete frames (sometimes called “flicker fusion”).",
      "Describe a possible visual misrepresentation that could result from digitally sampling an analog world.",
      "Compute memory space requirements based on resolution and color coding.",
      "Compute time requirements based on refresh rates and rasterization techniques.",
      "Design a user interface and an alternative for persons with color perception deficiency.",
      "Construct a simple graphical user interface using a graphics library."
    ]
  },
  {
    "name": "GIT-Visualization: Visualization",
    "outcomes": [
      "Compare and contrast data visualization and information visualization.",
      "Deploy basic algorithms for visualization.",
      "Compare the tradeoffs of visualization algorithms in terms of accuracy and performance.",
      "Design a suitable visualization for a particular combination of data characteristics, application tasks, and audience.",
      "Analyze the effectiveness of a given visualization for a particular task.",
      "Design a process to evaluate the utility of a visualization algorithm or system.",
      "Identify a variety of applications of visualization including representations of scientific, medical, and mathematical data; flow visualization; and spatial analysis."
    ]
  },
  {
    "name": "GIT-Rendering: Applied Rendering and Techniques",
    "outcomes": [
      "Describe and illustrate the light transport problem (i.e., light is emitted, scatters around the scene, and is measured by the eye).",
      "Describe the basic rendering pipeline.",
      "Compare and contrast how forward and backwards rendering factor into the graphics pipeline.",
      "Create a program to display 2D shapes in a window.",
      "Create a program to display 3D models.",
      "Produce linear perspective from similar triangles by converting points (x, y, z) to points (x/z, y/z, 1).",
      "Compute two-dimensional and 3-dimensional points by applying affine transformations.",
      "Indicate the changes required to extend 2D transformation operations to handle transformations in 3D.",
      "Define texture mapping, sampling, and anti-aliasing, and describe examples of each.",
      "Compare ray tracing and rasterization for the visibility problem.",
      "Construct a program that performs transformation and clipping operations on simple twodimensional shapes.",
      "Implement a simple real-time renderer using a rasterization API (e.g., OpenGL, webGL) using vertex buffers and shaders.",
      "Compare and contrast the different rendering techniques.",
      "Compare and contrast the difference in transforming the camera vs the models."
    ]
  },
  {
    "name": "GIT-Modeling: Geometric Modeling",
    "outcomes": [
      "Contrast representing curves and surfaces in both implicit and parametric forms.",
      "Create simple polyhedral models by surface tessellation.",
      "Create a mesh representation from an implicit surface.",
      "Create a fractal model or terrain using a procedural method.",
      "Create a mesh from data points acquired with a laser scanner.",
      "Create CSG models from simple primitives, such as cubes and quadric surfaces.",
      "Contrast modeling approaches with respect to space and time complexity and quality of image."
    ]
  },
  {
    "name": "GIT-Shading: Shading and Advanced Rendering",
    "outcomes": [
      "Describe how an algorithm estimates a solution to the rendering equation.",
      "Discuss the properties of a rendering algorithm (e.g., complete, consistent, and unbiased).",
      "Analyze the bandwidth and computation demands of a simple shading algorithm.",
      "Implement a non-trivial shading algorithm (e.g., toon shading, cascaded shadow maps) under a rasterization API.",
      "State how a particular artistic technique might be implemented in a renderer.",
      "Describe how one might recognize the shading techniques used to create a particular image.",
      "Write a program that implements any of the specified graphics techniques using a primitive graphics system at the individual pixel level.",
      "Write a ray tracer for scenes using a simple (e.g., Phong’s) Bidirectional Reflection Distribution Function (BRDF) plus reflection and refraction."
    ]
  },
  {
    "name": "GIT-Animation: Computer Animation",
    "outcomes": [
      "Using a simple open-source character model and rig, describe visually why each of the principles of animation is fundamental to realistic animation.",
      "Compute the location and orientation of model parts using a forward kinematic approach.",
      "Compute the orientation of articulated parts of a model from a location and orientation using an inverse kinematic approach.",
      "Compare the tradeoffs in different representations of rotations.",
      "Write a script that implements the spline interpolation method for producing in-between positions and orientations.",
      "6. Deploy off-the-shelf animation software to construct, rig, and animate simple organic forms."
    ]
  },
  {
    "name": "GIT-Simulation: Simulation",
    "outcomes": [
      "Implement algorithms for physical modeling of particle dynamics using simple Newtonian mechanics (e.g., Witkin & Kass, snakes and worms, symplectic Euler, Stormer/Verlet, or midpoint Euler methods)",
      "Contrast the basic ideas behind fluid simulation methods for modeling ballistic trajectories (e.g., for splashes, dust, fire, or smoke).",
      "Implement a smoke solver with user interaction."
    ]
  },
  {
    "name": "GIT-Immersion: Immersion",
    "outcomes": [
      "Create a stereoscopic image.",
      "Design and write an AR or VR application.",
      "Summarize the pros and cons of different types of viewer tracking.",
      "Compare and contrast the differences between geometry- and image-based virtual reality.",
      "Analyze the design issues of user action synchronization and data consistency in a networked environment.",
      "Create the specifications for an augmented reality application to be used by surgeons in the operating room.",
      "Assess an immersive application’s accessibility (See also: HCI-Accessibility, SEP-DEIA)",
      "Identify the most important technical characteristics of a VR system/application that should be controlled to avoid motion sickness and explain why."
    ]
  },
  {
    "name": "GIT-Interaction: Interaction",
    "outcomes": [
      "Create a simple game that responds to single channel mouse and keyboard events.",
      "Create a mobile app that responds to touch events.",
      "Design and create an application that responds to different event triggers.",
      "None-core:",
      "Assess the consistency or lack of consistency in cross-platform touch screen gestures.",
      "Design and create an application that provides haptic feedback.",
      "Write a program that is controlled by gestures."
    ]
  },
  {
    "name": "GIT-Image: Image Processing",
    "outcomes": [
      "Write a program that uses dilation and erosion to smooth the edges of a binary image.",
      "Manipulating the hue of an image.",
      "Write a program that applies a high-pass filter to an image. (The advanced variation would be to filter an image using a high-pass filter in the frequency domain.)",
      "Write a program that restores missing parts of an image using an in-paint algorithm (e.g., Poisson image editing)",
      "Assess the results of selectively filtering an image in the frequency domain."
    ]
  },
  {
    "name": "GIT-Physical: Tangible/Physical Computing",
    "outcomes": [
      "Construct a simple virtual switch or application button and use it to turn on an LED.",
      "Construct a simple system to move a servo in response to sensor data.",
      "Create a circuit and accompanying microcontroller code that uses a light sensor to vary a property of something else (e.g., color or brightness of an LED or graphic, position of an external actuator).",
      "Create a circuit with a variable resistor and write a microcontroller program that reads and responds to the resistor’s changing values.",
      "Create a 3D form in a CAD package.",
      "Show how affine transformations are achieved in the CAD program.",
      "Show an example of instances of an object.",
      "Create a fabrication plan. Provide a cost estimate for materials and time. How will you fabricate it?",
      "Fabricate it. How closely did your actual fabrication process match your plan? Where did it differ?",
      "Write the G- and M-Code to construct a 3D maze and use a CAD/CAM package to check your work.",
      "Decide and defend your decision to use Ethernet, WiFi, Bluetooth, RFID/NFC, or something else for internet connectivity when designing an IoT pill dispenser. Create an IoT pill dispenser.",
      "Distinguish between the different types of fabrication and describe when you would use each."
    ]
  },
  {
    "name": "GIT-SEP: Society, Ethics, and the Profession",
    "outcomes": [
      "Discuss the security issues inherent in location tags.",
      "Describe the ethical pitfalls of facial recognition. Can facial recognition be used ethically? If so, how?",
      "Discuss the copyright issues of using watermarked images to train a neural network."
    ]
  },
  {
    "name": "HCI-User: Understanding the User: Individual goals and interactions with others",
    "outcomes": [
      "Conduct a user-centered design process that is integrated into a project.",
      "Compare and contrast the needs of users with those of designers.",
      "Identify the representative users of a design and discuss who else could be impacted by it.",
      "Describe empathy and evaluation as elements of the design process.",
      "Carry out and document an analysis of users and their needs.",
      "Construct a user story from a needs assessment.",
      "Redesign an existing solution to a population whose needs differ from those of the initial target population.",
      "Contrast the different needs-finding methods for a given design problem.",
      "Reflect on whether your design would benefit from low-tech or no-tech components.",
      "Recognize the implications of designing for a multi-user system/context."
    ]
  },
  {
    "name": "HCI-Accountability: Accountability and Responsibility in Design",
    "outcomes": [
      "Identify and critique the potential impacts of a design on society and relevant communities to address such concerns as sustainability, inclusivity, safety, security, privacy, harm, and disparate impact.",
      "Identify the potential human factor elements in a design.",
      "Identify and understand direct and indirect stakeholders.",
      "Develop scenarios that consider the entire lifespan of a design, beyond the immediately planned uses that anticipate direct and indirect stakeholders.",
      "Identify and critique the potential factors in a design that impact direct and indirect stakeholders and broader society (e.g., transparency, sustainability of the system, trust, artificial intelligence).",
      "Assess the persuasive content of a design and its intent relative to user interests.",
      "Critique the outcomes of a design given its intent.",
      "Understand the impact of design decisions."
    ]
  },
  {
    "name": "HCI-Accessibility: Accessibility and Inclusive Design",
    "outcomes": [
      "Identify accessibility challenges faced by people with different disabilities and specify the associated accessible and assistive technologies that address them. (See also: AI-Agents, AI-Robotics)",
      "Identify appropriate inclusive design approaches, such as universal design and ability-based design.",
      "Identify and demonstrate understanding of software accessibility guidelines.",
      "Demonstrate recognition of laws and regulations applicable to accessible design.",
      "Apply inclusive frameworks to design, such as universal design and usability and ability-based design, and demonstrate accessible design of visual, voice-based, and touch-based UIs.",
      "Demonstrate understanding of laws and regulations applicable to accessible design.",
      "Demonstrate understanding of what is appropriate and inappropriate high level of skill during interaction with individuals from diverse populations.",
      "Analyze web pages and mobile apps for current standards of accessibility.",
      "Biases towards disability, race, and gender have historically, either intentionally or unintentionally, informed technology design.  a. Find examples.",
      "b. Consider how those experiences (learnings?) might inform design.",
      "Conceptualize user experience research to identify user needs and generate design insights."
    ]
  },
  {
    "name": "HCI-Evaluation: Evaluating the Design",
    "outcomes": [
      "Discuss the differences between formative and summative assessment and their role in evaluating design",
      "Select appropriate formative or summative evaluation methods at different points throughout the development of a design.",
      "Discuss the benefits of using both qualitative and quantitative methods for evaluation.",
      "Evaluate the implications and broader impacts of a given design.",
      "Plan a usability evaluation for a given user interface, and justify its study goals, hypothesis design, and study design.",
      "Conduct a usability evaluation of a given user interface and draw defensible conclusions given the study design.",
      "Select and run appropriate statistical tests on provided study data to test for significance in the results.",
      "Pre-register a study design, with planned statistical tests."
    ]
  },
  {
    "name": "HCI-Design: System Design",
    "outcomes": [
      "Propose system designs tailored to a specified appropriate mode of interaction.",
      "Follow an iterative design and development process that incorporates the following: a. Understanding the user",
      "Developing an increment",
      "Evaluating the increment",
      "Feeding those results into a subsequent iteration",
      "Explain the impact of changing constraints and design tradeoffs (e.g., hardware, user, security.) on system design.",
      "Evaluate architectural design approaches in the context of project goals.",
      "Identify synchronization challenges as part of the user experience in distributed environments.",
      "Evaluate and compare the privacy implications behind different input techniques for a given scenario.",
      "Explain the rationale behind a UI design based on visual design principles.",
      "Evaluate the privacy implications within a VR/AR/MR scenario"
    ]
  },
  {
    "name": "HCI-SEP: Society, Ethics, and the Profession",
    "outcomes": [
      "Conduct a user-centered design process that is integrated into a project.",
      "Identify and critique the potential impacts of a design on society and relevant communities to address such concerns as sustainability, inclusivity, safety, security, privacy, harm, and disparate impact.",
      "Critique a recent example of a non-inclusive design choice, its societal implications, and propose potential design improvements.",
      "Evaluating the design: Identify the implications and broader impacts of a given design.",
      "Evaluate the privacy implications within a VR/AR/MR scenario."
    ]
  },
  {
    "name": "MSF-Discrete: Discrete Mathematics",
    "outcomes": [
      "Sets, Relations, and Functions, Cardinality",
      "Explain with examples the basic terminology of functions, relations, and sets.",
      "Perform the operations associated with sets, functions, and relations.",
      "Relate practical examples to the appropriate set, function, or relation model, and interpret the associated operations and terminology in context.",
      "Calculate the size of a finite set, including making use of the sum and product rules and inclusion-exclusion principle.",
      "Explain the difference between finite, countable, and uncountable sets.",
      "Recursive mathematical definitions",
      "Apply recursive definitions of sequences or structures (e.g., Fibonacci numbers, linked lists, parse trees, fractals).",
      "Formulate inductive proofs of statements about recursive definitions.",
      "Solve a variety of basic recurrence relations.",
      "Analyze a problem to determine underlying recurrence relations.",
      "Given a recursive/iterative code snippet, describe its underlying recurrence relation, hypothesize a closed form for the recurrence relation, and prove the hypothesis correct (usually, using induction).",
      "Proof Techniques",
      "Identify the proof technique used in a given proof.",
      "Outline the basic structure of each proof technique (direct proof, proof by contradiction, and induction) described in this unit.",
      "Apply each of the proof techniques (direct proof, proof by contradiction, and induction) correctly in the construction of a sound argument.",
      "Determine which type of proof is best for a given problem.",
      "Explain the parallels between ideas of mathematical and/or structural induction to recursion and recursively defined structures.",
      "Explain the relationship between weak and strong induction and give examples of the appropriate use of each.",
      "Permutations, combinations, and counting",
      "Apply counting arguments, including sum and product rules, inclusion-exclusion principle, and arithmetic/geometric progressions.",
      "Apply the pigeonhole principle in the context of a formal proof.",
      "Compute permutations and combinations of a set, and interpret the meaning in the context of the specific application.",
      "Map real-world applications to appropriate counting formalisms, such as determining the number of ways to arrange people around a table, subject to constraints on the seating arrangement, or the number of ways to determine certain hands in cards (e.g., a full house).",
      "Modular arithmetic",
      "Perform computations involving modular arithmetic.",
      "Explain the notion of the greatest common divisor and apply Euclid's algorithm to compute it.",
      "Logic",
      "Convert logical statements from informal language to propositional and predicate logic expressions.",
      "Apply formal methods of symbolic propositional and predicate logic, such as calculating validity of formulae, computing normal forms, or negating a logical statement.",
      "Use the rules of inference to construct proofs in propositional and predicate logic.",
      "Describe how symbolic logic can be used to model real-life situations or applications, including those arising in computing contexts such as software analysis (e.g., program correctness), database queries, and algorithms.",
      "Apply formal logic proofs and/or informal, but rigorous, logical reasoning to real problems, such as predicting the behavior of software or solving problems such as puzzles.",
      "Describe the strengths and limitations of propositional and predicate logic.",
      "Explain what it means for a proof in propositional (or predicate) logic to be valid.",
      "Graphs",
      "Illustrate by example the basic terminology of graph theory, and some of the properties and special cases of types of graphs, including trees.",
      "Demonstrate different traversal methods for trees and graphs, including pre-, post-, and in-order traversal of trees, along with breadth-first and depth-first search for graphs.",
      "Model a variety of real-world problems in computer science using appropriate forms of graphs and trees, such as representing a network topology, the organization of a hierarchical file system, or a social network.",
      "Show how concepts from graphs and trees appear in data structures, algorithms, proof techniques (structural induction), and counting.",
      "The recommended topics are the same between CS core and KA-core, but with far more hours, the KA-core can cover these topics in depth and might include more computing-related applications."
    ]
  },
  {
    "name": "MSF-Probability: Probability",
    "outcomes": [
      "Basic notions: sample spaces, events, probability, conditional probability, Bayes’ rule",
      "Translate a prose description of a probabilistic process into a formal setting of sample spaces, outcome probabilities, and events.",
      "Calculate the probability of simple events.",
      "Determine whether two events are independent.",
      "Compute conditional probabilities, including through applying (and explaining) Bayes' Rule.",
      "Discrete random variables and distributions",
      "Define the concept of a random variable and indicator random variable.",
      "Determine whether two random variables are independent.",
      "Identify common discrete distributions (e.g., uniform, Bernoulli, binomial, geometric).",
      "Continuous random variables and distributions",
      "Identify common continuous distributions (e.g., uniform, normal, exponential).",
      "Calculate probabilities using cumulative density functions.",
      "Expectation, variance, law of large numbers, central limit theorem",
      "Define the concept of expectation and variance of a random variable.",
      "Compute the expected value and variance of simple or common discrete/continuous random variables.",
      "Explain the relevance of the law of large numbers and central limit theorem to probability calculations.",
      "Conditional distributions and expectation",
      "Explain the distinction between joint, marginal, and conditional distributions.",
      "Compute marginal and conditional distributions from a full distribution, for both discrete and continuous random variables.",
      "Compute conditional expectations for both discrete and continuous random variables.",
      "Applications to computing",
      "Describe how probability can be used to model real-life situations or applications, such as predictive text, hash tables, and quantum computation.",
      "Apply probabilistic processes to solving computational problems, such as through randomized algorithms or in security contexts."
    ]
  },
  {
    "name": "MSF-Statistics: Statistics",
    "outcomes": [
      "Basic definitions and concepts: populations, samples, measures of central tendency, variance a. Create and interpret frequency tables.",
      "Display data graphically and interpret graphs (e.g., histograms).",
      "Recognize, describe, and calculate means, medians, quantiles (location of data).",
      "Recognize, describe, and calculate variances, interquartile ranges (spread of data).",
      "Univariate data: point estimation, confidence intervals",
      "Formulate maximum likelihood estimation (in linear-Gaussian settings) as a least-squares problem.",
      "Calculate maximum likelihood estimates.",
      "Calculate maximum a posteriori estimates and make a connection with regularized least squares.",
      "Compute confidence intervals as a measure of uncertainty.",
      "Sampling, bias, adequacy of samples, Bayesian vs frequentist interpretations",
      "Multivariate data: estimation, correlation, regression",
      "Formulate the multivariate maximum likelihood estimation problem as a least-squares problem.",
      "Interpret the geometric properties of maximum likelihood estimates.",
      "Derive and calculate the maximum likelihood solution for linear regression.",
      "Derive and calculate the maximum a posteriori estimates for linear regression.",
      "Implement both maximum likelihood and maximum a posteriori estimates in the context of a polynomial regression problem.",
      "Formulate and understand the concept of data correlation (e.g., in 2D)",
      "Data transformation: dimension reduction, smoothing",
      "Formulate and derive Principal Component Analysis (PCA) as a least-squares problem.",
      "Geometrically interpret PCA (when solved as a least-squares problem).",
      "Describe when PCA works well (one can relate back to correlated data).",
      "Geometrically interpret the linear regression solution (maximum likelihood).",
      "Statistical models and algorithms",
      "Apply PCA to dimensionality reduction problems.",
      "Describe the tradeoff between compression and reconstruction power.",
      "Apply linear regression to curve-fitting problems.",
      "Explain the concept of overfitting.",
      "Discuss and apply cross-validation in the context of overfitting and model selection (e.g., degree of polynomials in a regression context)."
    ]
  },
  {
    "name": "MSF-Linear: Linear Algebra",
    "outcomes": [
      "Vectors: definitions, vector operations, geometric interpretation, angles",
      "Describe algebraic and geometric representations of vectors in Rn and their operations, including addition, scalar multiplication, and dot product.",
      "List properties of vectors in Rn.",
      "Compute angles between vectors in Rn.",
      "Matrices, matrix-vector equation, geometric interpretation, geometric transformations with matrices",
      "Perform common matrix operations, such as addition, scalar multiplication, multiplication, and transposition.",
      "Relate a matrix to a homogeneous system of linear equations.",
      "Recognize when two matrices can be multiplied.",
      "Relate various matrix transformations to geometric illustrations.",
      "Solving equations, row-reduction",
      "Formulate, solve, apply, and interpret properties of linear systems.",
      "Perform row operations on a matrix.",
      "Relate an augmented matrix to a system of linear equations.",
      "Solve linear systems of equations using the language of matrices.",
      "Translate word problems into linear equations.",
      "Perform Gaussian elimination.",
      "Linear independence, span, basis",
      "Define subspace of a vector space.",
      "List examples of subspaces of a vector space.",
      "Recognize and use basic properties of subspaces and vector spaces.",
      "Determine if specific subsets of a vector space are subspaces.",
      "Discuss the existence of a basis of an abstract vector space.",
      "Describe coordinates of a vector relative to a given basis.",
      "Determine a basis for and the dimension of a finite-dimensional space.",
      "Discuss spanning sets for vectors in Rn.",
      "Discuss linear independence for vectors in Rn.",
      "Define the dimension of a vector space.",
      "Orthogonality, projection, least-squares, orthogonal bases",
      "Explain the Gram-Schmidt orthogonalization process.",
      "Define orthogonal projections.",
      "Define orthogonal complements.",
      "Compute the orthogonal projection of a vector onto a subspace, given a basis for the subspace.",
      "Explain how orthogonal projections relate to least square approximations.",
      "Linear combinations of polynomials, Bezier curves",
      "Identify polynomials as generalized vectors.",
      "Explain linear combinations of basic polynomials.",
      "Describe orthogonality for polynomials.",
      "Distinguish between basic polynomials and Bernstein polynomials.",
      "Apply Bernstein polynomials to Bezier curves.",
      "Eigenvectors and eigenvalues",
      "Find the eigenvalues and eigenvectors of a matrix.",
      "Define eigenvalues and eigenvectors geometrically.",
      "Use characteristic polynomials to compute eigenvalues and eigenvectors.",
      "Use eigenspaces of matrices, when possible, to diagonalize a matrix.",
      "Perform diagonalization of matrices.",
      "Explain the significance of eigenvectors and eigenvalues.",
      "Find the characteristic polynomial of a matrix.",
      "Use eigenvectors to represent a linear transformation with respect to a particularly nice basis.",
      "Applications to computer science: PCA, SVD, page-rank, graphics",
      "Explain the geometric properties of PCA.",
      "Relate PCA to dimensionality reduction.",
      "Relate PCA to solving least-squares problems.",
      "Relate PCA to solving eigenvector problems.",
      "Apply PCA to reducing the dimensionality of a high-dimensional dataset (e.g., images).",
      "Explain the page-rank algorithm and understand how it relates to eigenvector problems.",
      "Explain the geometric differences between SVD and PCA.",
      "Apply SVD to a concrete example (e.g., movie rankings)."
    ]
  },
  {
    "name": "MSF-Calculus",
    "outcomes": [
      "Sequences, series, limits",
      "Explain the difference between infinite sets and sequences.",
      "Explain the formal definition of a limit.",
      "Derive the limit for examples of sequences and series.",
      "Explain convergence and divergence.",
      "Apply L’Hospital’s rule and other approaches to resolving limits.",
      "Single-variable derivatives: definition, computation rules (chain rule etc.), derivatives of important functions, applications",
      "Explain a derivative in terms of limits.",
      "Explain derivatives as functions.",
      "Perform elementary derivative calculations from limits.",
      "Apply sum, product, and quotient rules.",
      "Work through examples with important functions.",
      "Single-variable integration: definition, computation rules, integrals of important functions, fundamental theorem of calculus, definite vs indefinite, applications (including in probability) a. Explain the definitions of definite and indefinite integrals.",
      "Apply integration rules to examples with important functions.",
      "Explore the use of the fundamental theorem of calculus.",
      "Apply integration to problems.",
      "Parametric and polar representations",
      "Apply parametric representations of important curves.",
      "Apply polar representations.",
      "Taylor series",
      "Derive Taylor series for some important functions.",
      "Apply the Taylor series to approximations.",
      "Multivariate calculus: partial derivatives, gradient, chain-rule, vector valued functions, applications to optimization, convexity, global vs local minima. a. Compute partial derivatives and gradients.",
      "Work through examples with vector-valued functions with gradient notation.",
      "Explain applications to optimization.",
      "ODEs: definition, Euler method, applications to simulation",
      "Apply the Euler method to integration.",
      "Apply the Euler method to a single-variable differential equation.",
      "Apply the Euler method to multiple variables in an ODE."
    ]
  },
  {
    "name": "NC-Fundamentals: Fundamentals",
    "outcomes": [
      "Articulate the organization of the internet.",
      "List and define the appropriate network terminology.",
      "Describe the layered structure of a typical networked architecture.",
      "Identify the different types of complexity in a network (edges, core, etc.)."
    ]
  },
  {
    "name": "NC-Applications: Networked Applications",
    "outcomes": [
      "Define the principles of naming, addressing, resource location.",
      "Analyze the needs of specific networked application demands.",
      "Describe the details of one application layer protocol.",
      "Implement a simple client-server socket-based application."
    ]
  },
  {
    "name": "NC-Reliability: Reliability Support",
    "outcomes": [
      "Describe the operation of reliable delivery protocols.",
      "List the factors that affect the performance of reliable delivery protocols.",
      "Describe some TCP reliability design issues.",
      "Design and implement a simple reliable protocol."
    ]
  },
  {
    "name": "NC-Routing: Routing and Forwarding",
    "outcomes": [
      "Describe various routing paradigms and hierarchies.",
      "Describe how packets are forwarded in an IP network.",
      "Describe how the Internet tackles scalability challenges. ."
    ]
  },
  {
    "name": "NC-SingleHop: Single Hop Communication",
    "outcomes": [
      "Describe some basic aspects of modulation, bandwidth, and communication media.",
      "Describe in detail a MAC protocol.",
      "Demonstrate understanding of encoding and framing solution tradeoffs.",
      "Describe details of the implementation of Ethernet.",
      "Describe how switching works.",
      "Describe one kind of a LAN topology."
    ]
  },
  {
    "name": "NC-Security: Network Security",
    "outcomes": [
      "Describe some of the threat models of network security.",
      "Describe specific network-based countermeasures.",
      "Analyze various aspects of network security from a case study."
    ]
  },
  {
    "name": "NC-Mobility: Mobility",
    "outcomes": [
      "Describe some aspects of cellular communication such as registration",
      "Describe how 802.11 supports mobile users",
      "Describe practical uses of device-to-device communication, as well as multihop",
      "Describe one type of mobile network such as ad hoc"
    ]
  },
  {
    "name": "NC-Emerging: Emerging Topics",
    "outcomes": [
      "Describe the value of advances in middleboxes in networks.",
      "Describe the importance of Software Defined Networks.",
      "Describe some of the added value achieved by using Quantum Networking."
    ]
  },
  {
    "name": "OS-Purpose: Role and Purpose of Operating Systems",
    "outcomes": [
      "Understand the objectives and functions of modern operating systems.",
      "Evaluate the design issues in different usage scenarios (e.g., real time OS, mobile, server).",
      "Understand the functions of a contemporary operating system with respect to convenience, efficiency, and the ability to evolve.",
      "Understand how evolution and stability are desirable and mutually antagonistic in operating systems function."
    ]
  },
  {
    "name": "OS-Principles: Principles of Operating System",
    "outcomes": [
      "Understand how the application of software design approaches to operating systems design/implementation (e.g., layered, modular, etc.) affects the robustness and maintainability of an operating system.",
      "Categorize system calls by purpose.",
      "Understand dynamics of invoking a system call (e.g., passing parameters, mode change).",
      "Evaluate whether a function can be implemented in the application layer or can only be accomplished by system calls.",
      "Apply OS techniques for isolation, protection, and throughput across OS functions (e.g., starvation similarities in process scheduling, disk request scheduling, semaphores, etc.) and beyond.",
      "Understand how the separation into kernel and user mode affects safety and performance.",
      "Understand the advantages and disadvantages of using interrupt processing in enabling multiprogramming.",
      "Analyze potential vectors of attack via the operating systems and the security features designed to guard against them."
    ]
  },
  {
    "name": "OS-Concurrency: Concurrency",
    "outcomes": [
      "Understand the advantages and disadvantages of concurrency as inseparable functions within the operating system framework.",
      "Understand how architecture level implementation results in concurrency problems including race conditions.",
      "Understand concurrency issues in multiprocessor systems.",
      "Understand the range of mechanisms that can be employed at the operating system level to realize concurrent systems and describe the benefits of each.",
      "Understand techniques for achieving synchronization in an operating system (e.g., describe how a semaphore can be implemented using OS primitives) including intra-concurrency control and use of hardware atomics.",
      "Accurately analyze code to identify race conditions and appropriate solutions for addressing race conditions."
    ]
  },
  {
    "name": "OS-Protection: Protection and Safety",
    "outcomes": [
      "Understand the requirement for protection and security mechanisms in operating systems.",
      "List and describe the attack vectors that leverage OS vulnerabilities.",
      "Understand the mechanisms available in an OS to control access to resources.",
      "Summarize the features and limitations of an operating system that impact protection and security."
    ]
  },
  {
    "name": "OS-Scheduling: Scheduling",
    "outcomes": [
      "Compare and contrast the common algorithms used for both preemptive and non-preemptive scheduling of tasks in operating systems, such as priority, performance comparison, and fair-share schemes.",
      "Explain the relationships between scheduling algorithms and application domains.",
      "Explain the distinctions among types of processor scheduler such as short-term, medium-term, long-term, and I/O.",
      "Evaluate a problem or solution to determine appropriateness for asymmetric and/or symmetric multiprocessing.",
      "Evaluate a problem or solution to determine appropriateness as a process vs threads.",
      "List some contexts benefitting from preemption and deadline scheduling.",
      "Non-Core:",
      "Explain the ways that the logic embodied in scheduling algorithms are applicable to other operating systems mechanisms, such as first come first serve or priority to disk I/O, network scheduling, project scheduling, and problems beyond computing."
    ]
  },
  {
    "name": "OS-Process: Process Model",
    "outcomes": [
      "Understand how processes and threads use concurrency features to virtualize control.",
      "Understand reasons for using interrupts, dispatching, and context switching to support concurrency and virtualization in an operating system.",
      "Understand the different states that a task may pass through, and the data structures needed to support the management of many tasks.",
      "Understand the different ways of allocating memory to tasks, citing the relative merits of each.",
      "Apply the appropriate interprocess communication mechanism for a specific purpose in a programmed software artifact."
    ]
  },
  {
    "name": "OS-Memory: Memory Management",
    "outcomes": [
      "Explain memory hierarchy and cost-performance tradeoffs.",
      "Summarize the principles of virtual memory as applied to caching and paging.",
      "Evaluate the tradeoffs in terms of memory size (main memory, cache memory, auxiliary memory) and processor speed.",
      "Describe the reason for and use of cache memory (performance and proximity, how caches complicate isolation and virtual machine abstraction).",
      "Code/Develop efficient programs that consider the effects of page replacement and frame allocation on the performance of a process and the system in which it executes.",
      "Non-Core:",
      "Explain how hardware is utilized for efficient virtualization"
    ]
  },
  {
    "name": "OS-Devices: Device management",
    "outcomes": [
      "Explain architecture level device control implementation and link relevant operating system mechanisms and policy (e.g., buffering strategies, direct memory access).",
      "Explain OS device management layers and the architecture (e.g., device controller, device driver, device abstraction).",
      "Explain the relationship between the physical hardware and the virtual devices maintained by the operating system.",
      "Explain I/O data buffering and describe strategies for implementing it.",
      "Describe the advantages and disadvantages of direct memory access and discuss the circumstances in which its use is warranted.",
      "Non-Core:",
      "Describe the complexity and best practices for the creation of device drivers."
    ]
  },
  {
    "name": "OS-Files: File Systems API and Implementation",
    "outcomes": [
      "Explain the choices to be made in designing file systems.",
      "Evaluate different approaches to file organization, recognizing the strengths and weaknesses of each.",
      "Apply software constructs appropriately given knowledge of the file system implementation."
    ]
  },
  {
    "name": "OS-Advanced-Files: Advanced File systems",
    "outcomes": [
      "Explain how hardware developments have led to changes in the priorities for the design and the management of file systems.",
      "Map file abstractions to a list of relevant devices and interfaces.",
      "Identify and categorize different mount types.",
      "Explain specific file systems requirements and the specialized file systems features that meet those requirements.",
      "Explain the use of journaling and how log-structured file systems enhance fault tolerance.",
      "Non-Core:",
      "Explain purpose and complexity of distributed file systems.",
      "List examples of distributed file systems protocols.",
      "Explain mechanisms in file systems to improve fault tolerance."
    ]
  },
  {
    "name": "OS-Virtualization: Virtualization",
    "outcomes": [
      "Explain how hardware architecture provides support and efficiencies for virtualization.",
      "Explain the difference between emulation and isolation.",
      "Evaluate virtualization tradeoffs.",
      "Non-Core:",
      "Explain hypervisors and the need for them in conjunction with different types of hypervisors."
    ]
  },
  {
    "name": "OS-Real-time: Real-time and Embedded Systems",
    "outcomes": [
      "Explain what makes a system a real-time system.",
      "Explain latency and its sources in software systems and its characteristics.",
      "Explain special concerns that real-time systems present, including risk, and how these concerns are addressed.",
      "Non-Core:",
      "Explain specific real time operating systems features and mechanisms."
    ]
  },
  {
    "name": "OS-Faults: Fault tolerance",
    "outcomes": [
      "Explain how operating systems can facilitate fault tolerance, reliability, and availability.",
      "Explain the range of methods for implementing fault tolerance in an operating system.",
      "Explain how an operating system can continue functioning after a fault occurs.",
      "Explain the performance and flexibility tradeoffs that impact using fault tolerance.",
      "Non-Core:",
      "Describe operating systems fault tolerance issues and mechanisms in detail."
    ]
  },
  {
    "name": "OS-SEP: Society, Ethics, and the Profession",
    "outcomes": [
      "Explain advantages and disadvantages of finding and addressing bugs in open-source kernels.",
      "Contextualize history and positive and negative impact of Linux as an open-source product.",
      "List complications with reliance on operating systems past end-of-life.",
      "Understand differences in finding and addressing bugs for various operating systems payment models."
    ]
  },
  {
    "name": "PDC-Programs: Programs",
    "outcomes": [
      "Graphically show (as a Directed Acyclic Graph (DAG)) how to parallelize a compound numerical expression; for example, a = (b + c) * (d + e).",
      "Explain why the concepts of consistency and fault tolerance do not arise in purely sequential programs.",
      "Write a function that efficiently counts events such as networking packet receptions.",
      "Write a filter/map/reduce program in multiple styles.",
      "Write a service that creates a thread (or other procedural form of activation) to return a requested     web page to each new client."
    ]
  },
  {
    "name": "PDC-Communication: Communication",
    "outcomes": [
      "Explain the similarities and differences among: (1) Party A sends a message on channel X with contents 1 received by party B (2) A sets shared variable X to 1, read by B (3) A sets “X=1’ in a distributed shared map accessed by B.",
      "Write a program that distributes different segments of a data set to multiple workers, and collects results (for the simplest example, summing segments of an array).",
      "Write a parallel program that requests data from multiple sites and summarizes them using some form of reduction.",
      "Compare the performance of buffered versus unbuffered versions of a producer-consumer program.",
      "Determine whether a given communication scheme provides sufficient security properties for a given usage.",
      "Give an example of an ordering of accesses among concurrent activities (e.g., program with a data race) that is not sequentially consistent.",
      "Give an example of a scenario in which blocking message sends can deadlock.",
      "Describe at least one design technique for avoiding liveness failures in programs using multiple locks.",
      "Write a program that illustrates memory-access or message reordering.",
      "Describe the relative merits of optimistic versus conservative concurrency control under different rates of contention among updates.",
      "Give an example of a scenario in which an attempted optimistic update may never complete.",
      "Modify a concurrent system to use a more scalable, reliable, or available data store.",
      "Using an existing platform supporting replicated data stores, write a program that maintains a keyvalue mapping even when one or more hosts fail."
    ]
  },
  {
    "name": "PDC-Coordination: Coordination",
    "outcomes": [
      "Show how to avoid or repair a race error in a given program.",
      "Show how to ensure that a program correctly terminates when all of a set of concurrent tasks have completed.",
      "Write a function that efficiently counts events such as sensor inputs or networking packet receptions.",
      "Write a filter/map/reduce program in multiple styles.",
      "Write a program in which the termination of one set of parallel actions is followed by another.",
      "Write a program that speculatively searches for a solution by multiple activities, terminating others when one is found.",
      "Write a program in which a numerical exception (such as divide by zero) in one activity causes termination of others.",
      "Write a program for multiple parties to agree upon the current time of day; discuss its limitations compared to protocols such as network transfer protocol (NTP).",
      "Write a service that creates a thread (or other procedural form of activation) to return a requested web page to each new client."
    ]
  },
  {
    "name": "PDC-Evaluation: Evaluation",
    "outcomes": [
      "Revise a specification to enable parallelism and distribution without violating other essential properties or features.",
      "Explain how concurrent notions of safety and liveness extend their sequential counterparts.",
      "Specify a set of invariants that must hold at each bulk-parallel step of a computation.",
      "Write a test program that can reveal a data race error; for example, missing an update when two activities both try to increment a variable.",
      "In a given context, explain the extent to which introducing parallelism in an otherwise sequential program would be expected to improve throughput and/or reduce latency, and how it may impact energy efficiency.",
      "Show how scaling and efficiency change for sample problems without and with the assumption of problem size changing with the number of processors; further explain whether and how scalability would change under relaxations of sequential dependencies.",
      "Specify and measure behavior when a service is requested by unexpectedly many clients.",
      "Identify and repair a performance problem due to sequential bottlenecks.",
      "Empirically compare throughput of two implementations of a common design (perhaps using an existing test harness framework).",
      "Identify and repair a performance problem due to communication or data latency.",
      "Identify and repair a performance problem due to communication or data latency.",
      "Identify and repair a performance problem due to resource management overhead.",
      "Identify and repair a reliability or availability problem."
    ]
  },
  {
    "name": "PDC-Algorithms: Algorithms",
    "outcomes": [
      "Implement a parallel/distributed component based on a known algorithm.",
      "Write a data-parallel program that for example computes the average of an array of numbers.",
      "Write a producer-consumer program in which one component generates numbers, and another computes their average. Measure speedups when the numbers are small scalars versus large multi-precision values.",
      "Extend an event-driven sequential program by establishing a new activity in an event handler (for example a new thread in a GUI action handler).",
      "Improve the performance of a sequential component by introducing parallelism and/or distribution.",
      "Choose among different parallel/distributed designs for components of a given system.",
      "Design, implement, analyze, and evaluate a component or application for X operating in a given context, where X is in one of the listed domains, for example, a genetic algorithm for factory floor design.",
      "Critique the design and implementation of an existing component or application, or one developed by classmates.",
      "Compare the performance and energy efficiency of multiple implementations of a similar design, for example, multicore versus clustered versus GPU."
    ]
  },
  {
    "name": "SDF-Fundamentals: Fundamental Programming Concepts and Practices",
    "outcomes": [
      "In these learning outcomes, the term \"develop\" means \"design, write, test, and debug.\"",
      "Develop programs that use the fundamental programming constructs: assignment and expressions, basic I/O, conditional and iterative statements.",
      "Develop programs using functions with parameter passing.",
      "Develop programs that effectively use the different structured data types provided in the language like arrays/lists, dictionaries, and sets.",
      "Develop programs that use file I/O to provide data persistence across multiple executions.",
      "Develop programs that use language-provided libraries and frameworks (where applicable).",
      "Develop programs that use APIs to access or update data (e.g., from the web).",
      "Develop programs that create simple classes and instantiate objects of those classes (if supported by the language).",
      "Explain the concept of recursion and identify when and how to use it effectively.",
      "Develop recursive functions.",
      "Develop programs that can handle runtime errors.",
      "Read a given program and explain what it does.",
      "Write comments for a program or a module specifying what it does.",
      "Trace the flow of control during the execution of a program.",
      "Use appropriate terminology to identify elements of a program (e.g., identifier, operator, operand)."
    ]
  },
  {
    "name": "SDF-Data-Structures: Fundamental Data Structures",
    "outcomes": [
      "Write programs that use each of the key abstract data types provided in the language (e.g., arrays, tuples/records/structs, lists, stacks, queues, and associative data types like sets, dictionaries/maps).",
      "Select the appropriate data structure for a given problem.",
      "Explain how the performance of a program may change when using different data structures or operations.",
      "Write programs that work with text by using string processing capabilities provided by the language."
    ]
  },
  {
    "name": "SDF-Algorithms: Algorithms",
    "outcomes": [
      "Explain the role of algorithms for writing programs.",
      "Demonstrate how a problem may be solved by different algorithms, each with different properties.",
      "Explain some common algorithms (e.g., sorting, searching, tree traversal, graph traversal).",
      "Explain the impact on space/time performance of some algorithms."
    ]
  },
  {
    "name": "SDF-Practices: Software Development Practices",
    "outcomes": [
      "Develop tests for modules and apply a variety of strategies to design test cases.",
      "Explain some limitations of testing programs.",
      "Build, execute, and debug programs using a modern IDE and associated tools such as visual debuggers.",
      "Apply basic programming style guidelines to aid readability of programs such as comments, indentation, proper naming of variables, etc.",
      "Write specifications of a module as module comment describing its functionality."
    ]
  },
  {
    "name": "SDF-SEP: Society, Ethics, and the Profession",
    "outcomes": [
      "Explain/understand some of the intellectual property issues relating to programs.",
      "Explain/understand when code developed by others can be used and proper ways of disclosing their use.",
      "Explain/understand the responsibility of programmers when developing code for an overall solution (which may be developed by a team).",
      "Explain/understand one or more codes of conduct applicable to programmers."
    ]
  },
  {
    "name": "SE-Teamwork: Teamwork",
    "outcomes": [
      "Follow effective team communication practices.",
      "Articulate the sources of, hazards of, and potential benefits of team conflict – especially focusing on the value of disagreeing about ideas or proposals without insulting people.",
      "Facilitate a conflict-resolution and problem-solving strategy in a team setting.",
      "Collaborate effectively in cooperative development/programming.",
      "Propose and delegate necessary roles and responsibilities in a software development team.",
      "Compose and follow an agenda for a team meeting.",
      "Facilitate through involvement in a team project, the central elements of team building, establishing healthy team culture, and team management including creating and executing a team work plan.",
      "Promote the importance of and benefits that diversity and inclusivity brings to a software development team.",
      "Reference, as a team, the importance of, and strategies to interface with stakeholders outside the team on both technical and non-technical levels.",
      "Enumerate the risks associated with physical, distributed, hybrid, and virtual teams and possible points of failure and how to mitigate against and recover/learn from failures."
    ]
  },
  {
    "name": "SE-Tools: Tools and Environments",
    "outcomes": [
      "Describe the difference between centralized and distributed software configuration management.",
      "Describe how version control can be used to help manage software release management.",
      "Identify configuration items and use a source code control tool in a small team-based project.",
      "Describe how available static and dynamic test tools can be integrated into the software development environment.",
      "Understand the use of CI systems as a ground-truth for the state of the team’s shared code (build and test success).",
      "Describe the issues that are important in selecting a set of tools for the development of a specific software system, including tools for requirements tracking, design modeling, implementation, build automation, and testing.",
      "Demonstrate the capability to use software tools in support of the development of a software product of medium size."
    ]
  },
  {
    "name": "SE-Requirements: Product Requirements",
    "outcomes": [
      "Compare different methods of eliciting requirements along multiple axes.",
      "Identify differences between two methods of describing functional requirements (e.g., customer interviews, user studies) and the situations where each would be preferred.",
      "Identify which behaviors are required, allowed, or barred from a given set of requirements and a list of candidate behaviors.",
      "Collect a set of requirements for a simple software system.",
      "Identify areas of a software system that need to be changed, given a description of the system and a set of new requirements to be implemented.",
      "Identify the functional and non-functional requirements in a set of requirements.",
      "Create a prototype of a software system to validate a set of requirements – building a mock-up, MVP, etc.",
      "Estimate the time to complete a set of tasks, then compare estimates to the actual time taken.",
      "Determine an implementation sequence for a set of tasks, adhering to dependencies between them, with a goal to retire risk as early as possible.",
      "Write a requirement specification for a simple software system."
    ]
  },
  {
    "name": "SE-Design: Software Design",
    "outcomes": [
      "Identify the standard software architecture of a given high-level design.",
      "Select and use an appropriate design paradigm to design a simple software system and explain how system design principles have been applied in this design.",
      "Adapt a flawed system design to better follow principles such as separation of concerns or information hiding.",
      "Identify the dependencies among a set of software components in an architectural design.",
      "Design an API for a single component of a large software system, including identifying and documenting each operation’s invariants, contract, and error conditions.",
      "Evaluate an API description in terms of consistency, composability, and expandability.",
      "Expand an existing design to include a new piece of functionality.",
      "Design a set of data structures to implement a provided API surface.",
      "Identify which requirements are satisfied by a provided software design.",
      "Non-Core:",
      "Translate a natural language software design into class diagrams.",
      "Adapt a flawed system design to better follow the principles of least privilege and fail-safe defaults.",
      "Contrast two software designs across different qualities, such as efficiency or usability."
    ]
  },
  {
    "name": "SE-Construction: Software Construction",
    "outcomes": [
      "Write appropriate unit tests for a small component (several functions, a single type, etc.).",
      "Write appropriate interface and (if needed) implementation comments for a small component.",
      "Describe techniques, coding idioms and mechanisms for implementing designs to achieve desired properties such as reliability, efficiency, and robustness.",
      "Write robust code using exception handling mechanisms.",
      "Describe secure coding and defensive coding practices.",
      "Select and use a defined coding standard in a small software project.",
      "Compare and contrast integration strategies including top-down, bottom-up, and sandwich integration.",
      "Describe the process of analyzing and implementing changes to code base developed for a specific project.",
      "Describe the process of analyzing and implementing changes to a large existing code base.",
      "Non-Core:",
      "Rewrite a simple program to remove common vulnerabilities, such as buffer overflows, integer overflows and race conditions.",
      "Write a software component that performs some non-trivial task and is resilient to input and runtime errors."
    ]
  },
  {
    "name": "SE-Validation: Software Verification and Validation",
    "outcomes": [
      "Explain why testing is important.",
      "Distinguish between program validation and verification.",
      "Describe different objectives of testing.",
      "Compare and contrast the different types and levels of testing (regression, unit, integration, systems, and acceptance).",
      "Describe techniques for creating a test plan and generating test cases.",
      "Create a test plan for a medium-size code segment which includes a test matrix and generation of test data and inputs.",
      "Implement a test plan for a medium-size code segment.",
      "Identify the fundamental principles of test-driven development methods and explain the role of automated testing in these methods.",
      "Discuss issues involving the testing of object-oriented software.",
      "Describe mocking and dependency injection and their application.",
      "Undertake, as part of a team activity, a code review of a medium-size code segment.",
      "Describe the role that tools can play in the validation of software.",
      "Automate the testing in a small software project.",
      "Explain the roles, pros, and cons of pre-commit and post-commit testing.",
      "Discuss the tradeoffs between test coverage and test throughput/latency and how this can impact verification.",
      "Use a defect tracking tool to manage software defects in a small software project.",
      "Discuss the limitations of testing in certain domains.",
      "Non-Core:",
      "Describe and compare different tools for verification and validation.",
      "Automate the use of different tools in a small software project.",
      "Explain how and when random numbers should be used in testing.",
      "Describe approaches for fault estimation.",
      "Estimate the number of faults in a small software application based on fault density and fault seeding.",
      "Describe throughput and latency and provide examples of each.",
      "Explain speedup and the different forms of scaling and how they are computed.",
      "Describe common performance bottlenecks.",
      "Describe statistical methods and best practices for benchmarking software.",
      "Explain techniques for and challenges with measuring time when constructing a benchmark.",
      "Identify the figures of merit, construct and run a benchmark, and statistically analyze and visualize the results for a small software project.",
      "Describe techniques and issues with testing asynchronous, concurrent, and parallel software.",
      "Create a test plan for a medium-size code segment which contains asynchronous, concurrent, and/or parallel code, including a test matrix and generation of test data and inputs.",
      "Describe techniques for the verification and validation of non-code artifacts."
    ]
  },
  {
    "name": "SE-Refactoring: Refactoring and Code Evolution",
    "outcomes": [
      "KA-Core:",
      "Identify both explicit and implicit behavior of an interface and identify potential risks from Hyrum’s Law.",
      "Consider inputs from static analysis tools and/or Software Design principles to identify code in need of refactoring.",
      "Identify changes that can be broadly considered “backward compatible,” potentially with explicit statements about what usage is or is not supported.",
      "Refactor the implementation of an interface to improve design, clarity, etc. with minimal/zero impact on existing users.",
      "Evaluate whether a proposed change is sufficiently safe given the versioning methodology in use for a given project.",
      "Non-Core:",
      "Plan a complex multi-step refactoring to change default behavior of an API safely."
    ]
  },
  {
    "name": "SE-Reliability: Software Reliability",
    "outcomes": [
      "Describe how to determine the level of reliability required by a software system.",
      "Explain the problems that exist in achieving very high levels of reliability.",
      "Understand approaches to minimizing faults that can be applied at each stage of the software lifecycle.",
      "Non-Core:",
      "Demonstrate the ability to apply multiple methods to develop reliability estimates for a software system.",
      "Identify methods that will lead to the realization of a software architecture that achieves a specified level of reliability.",
      "Identify ways to apply redundancy to achieve fault tolerance.",
      "Identify single-point-of-failure (SPF) dependencies in a system design."
    ]
  },
  {
    "name": "SE-Formal: Formal Methods",
    "outcomes": [
      "Describe the role formal specification and analysis techniques can play in the development of complex software and compare their use as validation and verification techniques with testing.",
      "Apply formal specification and analysis techniques to software designs and programs with low complexity.",
      "Explain the potential benefits and drawbacks of using formal specification languages."
    ]
  },
  {
    "name": "SEC-Foundations: Foundational Security",
    "outcomes": [
      "Evaluate a system for possible attacks that can be launched by an adversary.",
      "Design and develop approaches to protect a system from a set of identified threats.",
      "Describe how harm to user privacy can be avoided.",
      "Develop a system that incorporates various principles of security and privacy.",
      "Compare the different access control models in terms of functionality and performance.",
      "Show how an adversary could use machine learning algorithms to reduce the security of a system.",
      "Show how a developer could improve the security of a system using machine learning algorithms.",
      "Describe hardware (especially CPU) vulnerabilities that can impact software."
    ]
  },
  {
    "name": "SEC-SEP: Society, Ethics, and the Profession",
    "outcomes": [
      "Calculate the impact of a breakdown in security of a given system.",
      "Construct a system that conforms to security laws.",
      "Apply a set of privacy regulations to design a system that protects privacy.",
      "Evaluate the legal ramifications of a system not corresponding to applicable laws and regulations.",
      "Construct a system that is designed to avoid harm to user privacy."
    ]
  },
  {
    "name": "SEP-Context: Social Context",
    "outcomes": [
      "Describe the different ways that computer technology (networks, mobile computing, artificial intelligence) mediates social interaction at the personal and collective levels.",
      "Identify developers’ assumptions and values embedded in hardware and software design, especially as they pertain to usability for diverse populations including under-served and those with disabilities.",
      "Interpret the social context of a given design and its implementation.",
      "Analyze the efficacy of a given design and implementation using empirical data.",
      "Understand the implications of technology use (e.g., social media) for different identities, cultures, and communities.",
      "Describe the internet’s role in facilitating communication between citizens, governments, and each other.",
      "Analyze the effects of reliance on computing in the implementation of democracy (e.g., delivery of social services, electronic voting).",
      "Describe the impact of a lack of appropriate representation of people from historically minoritized populations in the computing profession (e.g., industry culture, product diversity).",
      "Discuss the implications of context awareness in ubiquitous computing systems.",
      "Express how access to the internet and computing technologies affect different societies.",
      "Identify why/how internet access can be viewed as a human right."
    ]
  },
  {
    "name": "SEP-Ethical-Analysis: Methods for Ethical Analysis",
    "outcomes": [
      "Describe how a given cultural context impacts decision making.",
      "Express the use of example and analogy in ethical argument.",
      "Analyze (and avoid) basic logical fallacies in an argument.",
      "Analyze an argument to identify premises and conclusion.",
      "Evaluate how and why ethics is so important in computing and how it relates to cultural norms, values, and law.",
      "Justify a decision made on ethical grounds.",
      "Distinguish all stakeholder positions in relation to their cultural context in a given situation.",
      "Analyze the potential for introducing or perpetuating ethical debt (deferred consideration of ethical impacts or implications) in technical decisions.",
      "Discuss the advantages and disadvantages of traditional ethical frameworks.",
      "Analyze ethical dilemmas related to the creation and use of technology from multiple perspectives using ethical frameworks."
    ]
  },
  {
    "name": "SEP-Professional-Ethics: Professional Ethics",
    "outcomes": [
      "Identify ethical issues that arise in software design, development practices, and software deployment.",
      "Discuss how to address ethical issues in specific situations.",
      "Express the ethical responsibility of ensuring software correctness, reliability and safety including from where this responsibility arises (e.g., ACM/IEEE/AAAI Codes of Ethics, laws and regulations, organizational policies).",
      "Describe the mechanisms that typically exist for a professional to keep up to date in ethical matters.",
      "Describe the strengths and weaknesses of relevant professional codes as expressions of being a professional and guides to decision-making.",
      "Analyze a global computing issue, observing the role of professionals and government officials in managing this problem.",
      "Describe ways in which professionals and professional organizations may contribute to public policy.",
      "Describe the consequences of inappropriate professional behavior.",
      "Be familiar with whistleblowing and have access to knowledge to guide one through an incident.",
      "Identify examples of how regional culture interplays with ethical dilemmas.",
      "Describe forms of harassment and discrimination and avenues of assistance.",
      "Assess various forms of professional credentialing.",
      "State the relationship between ergonomics in computing environments and people’s health.",
      "Describe issues associated with industries’ push to focus on time-to-market versus enforcing quality professional standards."
    ]
  },
  {
    "name": "SEP-IP: Intellectual Property",
    "outcomes": [
      "Describe and critique legislation and precedent aimed at digital copyright infringements.",
      "Identify contemporary examples of intangible digital intellectual property.",
      "Select an appropriate software license for a given project.",
      "Defend legal and ethical uses of copyrighted materials.",
      "Interpret the intent and implementation of software licensing.",
      "Discuss whether a use of copyrighted material is likely to be fair use.",
      "Analyze the ethical issues inherent in various plagiarism detection mechanisms.",
      "Identify multiple forms of plagiarism beyond verbatim copying of text or software (e.g., intentional paraphrasing, authorship misrepresentation, and improper attribution).",
      "Discuss the philosophical bases of intellectual property in an appropriate context (e.g., country).",
      "Distinguish the conflicting issues involved in securing software patents.",
      "Contrast the protections and obligations of copyright, patent, trade secret, and trademarks.",
      "Describe the rationale for the legal protection of intellectual property in the appropriate context (e.g., country).",
      "Analyze the use of copyrighted work under the concepts of fair use and the first sale doctrine.",
      "Identify the goals of the open-source movement and its impact on fields beyond computing, such as the right-to-repair movement.",
      "Summarize the global nature of software piracy.",
      "Criticize the use of technical measures of digital rights management (e.g., encryption, watermarking, copy restrictions, and region lockouts) from multiple stakeholder perspectives.",
      "Discuss the nature of anti-circumvention laws in the context of copyright protection."
    ]
  },
  {
    "name": "SEP-Privacy: Privacy and Civil Liberties",
    "outcomes": [
      "Evaluate solutions to privacy threats in transactional databases and data warehouses.",
      "Describe the role of data collection in the implementation of pervasive surveillance systems (e.g., RFID, face recognition, toll collection, mobile computing).",
      "Distinguish the concepts and goals of anonymity and pseudonymity.",
      "Describe the ramifications of technology-based privacy protections, including differential privacy and end-to-end encryption.",
      "Identify cultural differences regarding the nature and necessity of privacy and other civil liberties.",
      "Discuss the philosophical basis for the legal protection of personal privacy in an appropriate context (e.g., country).",
      "Critique the intent, potential value, and implementation of various forms of privacy legislation and principles beyond what the law requires.",
      "Identify strategies to enable appropriate freedom of expression."
    ]
  },
  {
    "name": "SEP-Communication: Communication",
    "outcomes": [
      "Understand the importance of writing concise and accurate technical documents following welldefined standards for format and for including appropriate tables, figures, and references.",
      "Analyze written technical documentation for technical accuracy, concision, lack of ambiguity, and awareness of audience.",
      "Compose and deliver an audience-aware, accessible, and organized formal presentation.",
      "Plan interactions (e.g., virtual, face-to-face, shared documents) with others in ways that invite inclusive participation, model respectful consideration of others’ contributions, and explicitly value diversity of ideas.",
      "Identify and describe qualities of effective communication (e.g., virtual, face-to-face, intragroup, shared documents).",
      "Understand how to communicate effectively and appropriately as a member of a team including conflict resolution techniques.",
      "Discuss ways to influence performance and results in diverse and cross-cultural teams.",
      "Assess personal strengths and weaknesses to work remotely as part of a team drawing from diverse backgrounds and experiences.",
      "Choose an appropriate way to communicate delicate ethical concerns."
    ]
  },
  {
    "name": "SEP-Sustainability: Sustainability",
    "outcomes": [
      "Identify ways to be a sustainable practitioner in a specific area or with a specific project.",
      "Assess the environmental impacts of a given project’s deployment (e.g., energy consumption, contribution to e-waste, impact of manufacturing).",
      "Describe global social and environmental impacts of computer use and disposal.",
      "List the sustainable effects of modern practices and activities (e.g., remote work, e-commerce, cryptocurrencies, AI models, data centers).",
      "Describe the environmental impacts of design choices within the field of computing that relate to algorithm design, operating system design, networking design, database design, etc.",
      "Analyze the social and environmental impacts of new system designs.",
      "Design guidelines for sustainable IT design or deployment in areas such as smart energy systems, social networking, transportation, agriculture, supply-chain systems, environmental monitoring, and citizen activism.",
      "Assess computing applications in respect to environmental issues (e.g., energy, pollution, resource usage, recycling and reuse, food management and production)."
    ]
  },
  {
    "name": "SEP-History: Computing History",
    "outcomes": [
      "Understand the relevance and impact of computing history on recent events, present context, and possible future outcomes, from more than one cultural perspective.",
      "Discuss how perspectives held today have been shaped by history, and that alternative perspectives exist (e.g., fears of AI replacing human workers vs AI augmenting human work, various views on Moore’s Law).",
      "Identify formative and consequential trends in the history of the computing field.",
      "Identify the contributions of pioneering individuals or organizations (research labs, computer companies, government offices) in the computing field.",
      "Discuss the historical context for important moments in history of computing, such as the move from vacuum tubes to transistors (TRADIC), early seminal operating systems (e.g., OS 360), Xerox PARC and the first Apple computer with a GUI, the creation of specific programming language paradigms, the first computer virus, the creation of the internet, the creation of the WWW, the dot com bubble, Y2K, the introduction of smartphones, etc.",
      "Compare daily life before and after the advent of milestone developments (e.g., personal computers or the internet)."
    ]
  },
  {
    "name": "SEP-Economies: Economies of Computing",
    "outcomes": [
      "Summarize the social effects of economic models (e.g., the knowledge and attention economies).",
      "Describe the differences and similarities of competing strategies (e.g., subscription vs freemium vs free).",
      "Discuss examples of digital divides.",
      "Understand the effects of automation and AI on society.",
      "Understand the ethical implications of computing economies that rely on attention and data."
    ]
  },
  {
    "name": "SEP-Security: Security Policies, Laws and Computer Crimes",
    "outcomes": [
      "List classic examples of computer crimes and social engineering incidents with societal impact.",
      "Identify issues with laws that apply to computer crimes.",
      "Describe the motivation and ramifications of cyber terrorism, data theft, hacktivism, ransomware, and other attacks.",
      "Examine the ethical and legal issues surrounding the misuse of access and various breaches of security.",
      "Discuss the professional's role in security and the tradeoffs and challenges involved.",
      "Investigate measures that can be taken by both individuals and organizations including governments to prevent or mitigate the undesirable effects of computer crimes.",
      "Design a company-wide security policy, which includes procedures for managing passwords and employee monitoring.",
      "Understand how legislation from one region may affect activities in another (e.g., how EU GDPR applies globally, when EU persons are involved)."
    ]
  },
  {
    "name": "SEP-DEIA: Diversity, Equity, Inclusion, and Accessibility",
    "outcomes": [
      "Define and distinguish equity, equality, diversity, inclusion, and accessibility.",
      "Identify language, practices, and behaviors that may make someone feel included in a workplace and/or a team, and why is it relevant. Avoid charged terminology - see Words Matter",
      "(www.acm.org/diversity-inclusion/words-matter) – this includes identifying and accommodating users who are often excluded without thought and not considered at all.",
      "Evaluate the accessibility of your classroom or lab. Evaluate the accessibility of your webpage. (See www.w3.org/WAI and www.w3.org/TR/WCAG21).",
      "Demonstrate collegiality and respect when working with team members who do not share your identity. It is not enough to merely assign team projects. Faculty should prepare students for teamwork and monitor, mentor, and assess the effectiveness of their student teams throughout a project.",
      "Compare the demographics of your institution’s computer science and STEM majors to the overall institutional demographics. If they differ, identify factors that contribute to inequitable access, engagement, and achievement in computer science among marginalized groups. If they do not, assess why not.",
      "Identify developers’ assumptions and values embedded in hardware and software design, especially as they pertain to usability by diverse populations.",
      "Identify examples of the benefits that diverse teams can bring to software products, and how a lack of diversity has costs.",
      "Analyze the work of experts who reflect the identities of the classroom and the world.",
      "Assess the impact of power and privilege in the computing profession as it relates to culture, industry, products, and society.",
      "Develop examples of systemic changes that could positively address diversity, equity, inclusion, and accessibility in a familiar context (i.e., in an introductory computing course) and an unfamiliar context and when these might be different, or the same.",
      "Compare the demographics of your institution to the overall community demographics. If they differ, identify factors that contribute to inequitable access, engagement, and achievement among marginalized groups. If they do not, assess why not."
    ]
  },
  {
    "name": "SF-Overview: Overview of Computer Systems",
    "outcomes": [
      "Describe the basic building blocks of computers and their role in the historical development of computer architecture.",
      "Design a simple logic circuit using the fundamental building blocks of logic design to solve a simple problem (e.g., adder).",
      "Describe how computing systems are constructed of layers upon layers, based on separation of concerns, with well-defined interfaces, hiding details of low layers from the higher layers.",
      "Describe that hardware, OS, VM, and application are additional layers of interpretation/processing.",
      "Describe the mechanisms of how errors are detected, signaled back, and handled through the layers.",
      "Construct a simple program (e.g., a TCP client/server) using methods of layering, error detection and recovery, and reflection of error status across layers.",
      "Identify bugs in a layered program by using tools for program tracing, single stepping, and debugging.",
      "Understand the concept of strong vs weak scaling, i.e., how performance is affected by the scale of the problem vs the scale of resources to solve the problem. This can be motivated by simple, realworld examples."
    ]
  },
  {
    "name": "SF-Foundations: Basic Concepts",
    "outcomes": [
      "Describe the differences between digital and analog systems, and between discrete and continuous systems. Can give real-world examples of these systems.",
      "Describe computations as a system characterized by a known set of configurations with transitions from one unique configuration (state) to another (state).",
      "Describe the distinction between systems whose output is only a function of their input (stateless) and those with memory/history (stateful).",
      "Develop state machine descriptions for simple problem statement solutions (e.g., traffic light sequencing, pattern recognizers).",
      "Describe a computer as a state machine that interprets machine instructions.",
      "Explain how a program or network protocol can also be expressed as a state machine and that alternative representations for the same computation can exist.",
      "Derive the time-series behavior of a state machine from its state machine representation (e.g., TCP connection management state machine).",
      "Write a simple sequential problem and a simple parallel version of the same program.",
      "Evaluate the performance of simple sequential and parallel versions of a program with different problem sizes and be able to describe the speed-ups achieved.",
      "Describe on an execution timeline how parallelism events and operations can take place simultaneously (i.e., at the same time). Explain how work can be performed in less elapsed time if this can be exploited."
    ]
  },
  {
    "name": "SF-Resource: Resource Management",
    "outcomes": [
      "Define how finite computer resources (e.g., processor share, memory, storage, and network bandwidth) are managed by their careful allocation to existing entities.",
      "Describe how common resource allocation/scheduling algorithms work.",
      "Develop common scheduling algorithms and evaluate their performances.",
      "Describe the pros and cons of common scheduling algorithms."
    ]
  },
  {
    "name": "SF-Performance: System Performance",
    "outcomes": [
      "Describe the breakdown of the latency of computer systems in terms of memory, disk, and network.",
      "Explain the importance of locality in determining system performance.",
      "Calculate average memory access time and describe the tradeoffs in memory hierarchy performance in terms of capacity, miss/hit rate, and access time.",
      "Explain why it is important to isolate and protect the execution of individual programs and environments that share common underlying resources.",
      "Describe how the concept of indirection can create the illusion of a dedicated machine and its resources even when physically shared among multiple programs and environments.",
      "Evaluate the performance of two application instances running on separate virtual machines and determine the effect of performance isolation."
    ]
  },
  {
    "name": "SF-Evaluation: Performance Evaluation",
    "outcomes": [
      "Explain how the components of system architecture contribute to improving its performance.",
      "Explain the circumstances in which a given figure of a system performance metric is useful.",
      "Explain the usage and inadequacies of benchmarks as a measure of system performance.",
      "Describe Amdahl’s law and discuss its limitations.",
      "Apply limit studies or simple calculations to produce order-of-magnitude estimates for a given performance metric in a given context.",
      "Apply software tools to profile and measure program performance.",
      "Design and conduct a performance-oriented experiment of a common system (e.g., an OS and Spark).",
      "Design a performance experiment on a layered system to determine the effect of a system parameter on system performance."
    ]
  },
  {
    "name": "SF-Reliability: System Reliability",
    "outcomes": [
      "Explain the distinction between program errors, system errors, and hardware faults (e.g., corrupted memory) and exceptions (e.g., attempt to divide by zero).",
      "Articulate the distinction between detecting, handling, and recovering from faults and the methods for their implementation.",
      "Describe the role of error correction codes in providing error checking and correction techniques in memories, storage, and networks.",
      "Apply simple algorithms for exploiting redundant information for the purposes of data correction.",
      "Compare different error detection and correction methods for their data overhead, implementation complexity, and relative execution time for encoding, detecting, and correcting errors."
    ]
  },
  {
    "name": "SF-Security: System Security",
    "outcomes": [
      "Describe some common system security issues and give examples",
      "Describe some countermeasures against system security issues",
      "Describe representative countermeasure systems"
    ]
  },
  {
    "name": "SF-Design: System Design",
    "outcomes": [
      "Describe common criteria of system design.",
      "Given the functionality requirements of a system and its key design criteria, provide a high-level design of this system.",
      "Describe the design of some representative systems."
    ]
  },
  {
    "name": "SF-SEP: Society, Ethics, and the Profession",
    "outcomes": [
      "Describe the intellectual property rights of computer systems.",
      "List representative software licenses and compare their differences.",
      "List representative computer crimes."
    ]
  },
  {
    "name": "SPD-Common: Common Aspects/Shared Concerns",
    "outcomes": [
      "List the constraints of mobile programming.",
      "List the characteristics of scripting languages.",
      "Describe the three-tier model of web programming.",
      "Describe how the state is maintained in web programming."
    ]
  },
  {
    "name": "SPD-Web: Web Platforms",
    "outcomes": [
      "Design and implement a web-based application using a microservice architecture design.",
      "Describe the constraints, such as hosting, services, and scalability, related to web platforms.",
      "Compare and contrast web programming with general-purpose programming.",
      "Describe the differences between Software-as-a-Service (SaaS) and traditional software products.",
      "Discuss how web standards impact software development.",
      "Evaluate an existing web application against current web standards."
    ]
  },
  {
    "name": "SPD-Mobile: Mobile Platforms",
    "outcomes": [
      "Compare mobile programming with general-purpose programming.",
      "Develop a location-aware mobile application with data API integration.",
      "Build a sensor-driven mobile application capable of logging data on a remote server.",
      "Create a communication app incorporating telephony and instant messaging.",
      "Evaluate the pros and cons of native and cross-platform mobile application development."
    ]
  },
  {
    "name": "SPD-Robot: Robot Platforms",
    "outcomes": [
      "Design and implement an application on a given robotic platform.",
      "Integrate an Arduino-based robot kit and program it to navigate a maze.",
      "Compare robot-specific languages and techniques with those used for general-purpose software development.",
      "Explain the rationale behind the design of the robotic platform and its interconnections with physical or simulated systems.",
      "Given a high-level application, design a robot software architecture using ROS specifying all components and interconnections (ROS topics) to accomplish that application.",
      "Discuss the constraints a given robotic platform imposes on developers."
    ]
  },
  {
    "name": "SPD-Embedded: Embedded Platforms",
    "outcomes": [
      "Design and implement a small embedded system for a given platform (e.g., a smart alarm clock or a drone).",
      "Describe the unique characteristics of embedded systems versus other systems.",
      "Interface with sensors/actuators.",
      "Debug a problem with an existing embedded platform.",
      "Identify different types of embedded architectures.",
      "Evaluate which architecture is best for a given set of requirements.",
      "Design and develop software to interact with and control hardware.",
      "Design methods for real-time systems.",
      "Evaluate real-time scheduling and schedulability analysis.",
      "Evaluate formal specification and verification of timing constraints and properties."
    ]
  },
  {
    "name": "SPD-Game: Game Platforms",
    "outcomes": [
      "Recall the characteristics of common general-purpose graphics processing architectures.",
      "Identify the key stages of the immediate-mode rendering pipeline.",
      "Describe the key constraints a specific game platform will likely impose on developers.",
      "Explain how eSports are streamed to large audiences over the internet.",
      "Translate complex mathematical functions into performant source code.",
      "Use an industry-standard graphics API to render a 3D model in a virtual scene.",
      "Modify a shader to change a visual effect according to stated requirements.",
      "Implement a game for a particular platform according to the specification.",
      "Optimize a function for processing collision detection in a simulated environment.",
      "Assess a game's run-time and memory performance using an industry-standard tool and development environment.",
      "Compare the interfaces of different game platforms, highlighting their respective implications for human-computer interaction.",
      "Recommend an appropriate set of development tools and techniques for implementing a game of a particular genre for a given platform.",
      "Discuss the key challenges in making a digital game that is cross-platform compatible.",
      "Express how game developers can enhance the accessibility of a game interface.",
      "Create novel forms of gameplay using frontier game platforms."
    ]
  },
  {
    "name": "SPD-Interactive: Interactive Computing Platforms",
    "outcomes": [
      "Analyze large datasets interactively.",
      "Create a backing track for a musical performance, such as live coding.",
      "Create compelling computational notebooks that construct a narrative for a given journalistic goal/story.",
      "Implement interactive code that uses a dataset and generates exploratory graphics.",
      "Create a program that performs a task using LLM systems.",
      "Contrast a program developed by an AI platform and by a human.",
      "Implement a system that interacts with a human without using a screen.",
      "Contextualize the attributes of different data analysis styles, such as interactive vs engineered pipeline.",
      "Write a program using a notebook computing platform (e.g., searching, sorting, or graph manipulation).",
      "Demonstrate a quantum gate outcome using a quantum platform."
    ]
  },
  {
    "name": "SPD-SEP/Mobile",
    "outcomes": [
      "Understand and uphold ethical responsibilities for safeguarding user privacy and data protection in mobile applications.",
      "Design mobile applications with accessibility in mind, ensuring effective use by people with disabilities.",
      "Demonstrate proficiency in secure coding practices to mitigate risks associated with various security threats in mobile development.",
      "Analyze the broader social impacts of mobile technology, including its influence on communication patterns, relationships, and mental health.",
      "Comprehend the ethical considerations of using AI in mobile applications, ensuring unbiased and fair algorithms."
    ]
  },
  {
    "name": "SPD-SEP/Web",
    "outcomes": [
      "Understand how mobile computing impacts communications and the flow of information within society.",
      "Design mobile apps that have made daily tasks easier/faster.",
      "Recognize how the ubiquity of mobile computing has affected work-life balance.",
      "Understand how mobile computing impacts health monitoring and healthcare services.",
      "Define how mobile apps are used to educate about and help achieve UN sustainability goals."
    ]
  },
  {
    "name": "SPD-SEP/Game",
    "outcomes": [
      "Discuss how creators can protect their intellectual property.",
      "Identify common pitfalls in game interfaces that exclude players with impaired or non-functional vision.",
      "Describe how heuristic evaluation can be used to identify usability problems in game interfaces.",
      "Explain why upper body injuries are common in eSports.",
      "Discuss how to reform characters and dialogues in a scene to reduce stereotype threat.",
      "Illustrate how the portrayal of race in a game can influence the risk of social exclusion in the associated online community around the game.",
      "Modify a policy for a LAN party event to include mitigations that lower the risk of fire.",
      "Design a gamification strategy to motivate serious play for an awareness-raising game.",
      "Analyze the role of company hiring policies and advocacy on social mobility.",
      "Assess the appropriateness of two manufacturers for producing a new game console.",
      "Compare options for open-source licensing of a game development tool.",
      "Recommend changes to a specific game interface to improve access to players who are deaf or whose hearing is otherwise impaired.",
      "Discuss whether games are addictive.",
      "Suggest how the portrayal of women in video games influences how players perceive members of those groups.",
      "Create a video game that successfully advocates for climate science."
    ]
  },
  {
    "name": "SPD-SEP/Robotics",
    "outcomes": [
      "Identify instances of bias in robotic algorithms and propose strategies to mitigate them.",
      "Evaluate and critique robotic systems for ethical and fairness considerations, suggesting improvements where necessary.",
      "Analyze real-world examples of biases in robot decision-making and develop strategies to reduce bias in robotic systems.",
      "Assess the potential risks associated with robots in public spaces and propose safety measures to mitigate those risks.",
      "Evaluate the impact of patient consent and trust on the effectiveness of medical robot deployments in healthcare contexts."
    ]
  },
  {
    "name": "SPD-SEP/Interactive",
    "outcomes": [
      "Indicate a framework for accountability in AI model deployment, including clear documentation and attribution.",
      "Discuss ethical codes of conduct and professional standards relevant to prompt programming and AI development.",
      "Create communication plans and materials to educate the public about AI capabilities, limitations, and ethical safeguards."
    ]
  }
]